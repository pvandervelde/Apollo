<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  
  <UsingTask TaskName="Zip" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <InputFileNames ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <OutputFileName ParameterType="System.String" Required="true" />
      <OverwriteExistingFile ParameterType="System.Boolean" Required="false" />
	</ParameterGroup>
    <Task>
      <Reference Include="System.IO.Compression" />
      <Using Namespace="System.IO.Compression" />
      <Code Type="Fragment" Language="cs">
      <![CDATA[        
        const int BufferSize = 64 * 1024;

        var buffer = new byte[BufferSize];
        var fileMode = OverwriteExistingFile ? FileMode.Create : FileMode.CreateNew;

        if (InputFileNames.Length == 0)
        {
            Log.LogError("No input files provided");
        }
        
        using (var outputFileStream = new FileStream(OutputFileName, fileMode))
        {
            using (var archive = new ZipArchive(outputFileStream, ZipArchiveMode.Create))
            {
                foreach (var inputFileName in InputFileNames.Select(f => f.ItemSpec))
                {
                    Log.LogMessage("Writing file '{0}'", inputFileName);
                    var archiveEntry = archive.CreateEntry(Path.GetFileName(inputFileName));

                    using (var fs = new FileStream(inputFileName, FileMode.Open))
                    {
                        using (var zipStream = archiveEntry.Open())
                        {
                            int bytesRead = -1;
                            while ((bytesRead = fs.Read(buffer, 0, BufferSize)) > 0)
                            {
                                zipStream.Write(buffer, 0, bytesRead);
                            }
                        }
                    }
                }
            }
        }

        // Log.HasLoggedErrors is true if the task logged any errors -- even if they were logged 
        // from a task's constructor or property setter. As long as this task is written to always log an error
        // when it fails, we can reliably return HasLoggedErrors.
        return !Log.HasLoggedErrors;        
      ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>