<!--
***********************************************************************************************
Babel.targets

Last update: 25/02/2009

This file contains the Obfuscate target definition.
The Obfuscate target is inserted into the build process after the AfterBuild
target. Obfuscate target calls babel.exe to process the output target file 
defined into the project. 

To setup babel into your build process you have to modify this file Configuration 
section updating <UsingTask> definition and <BabelDirectory> property
according to your babel installation configuration.

Some of the command line switches default values passed to babel are 
also defined into this file. If you want to customize some of these properties, 
they have to be overridden into your .*proj file.

For instance, in this file the property UnicodeNormalization is set to true
to enable Unicode normalization by default:
<UnicodeNormalization>true</UnicodeNormalization>

If you want disable Unicode normalization into your project, insert into 
the .*proj file after the babel import declaration:
 
 <Import Project="<full path to Babel.Build.targets file>"
 
the following lines:

<PropertyGroup>
  <UnicodeNormalization>false</UnicodeNormalization>
</PropertyGroup>

All the properties that can be overridden are declared into the section:
Babel Properties.

Read the following section that explains how to integrate babel into
the build process.

- How to use babel msbuild task into a Visual Studio project

1) Unload Visual Studio project and edit .*proj file
2) Into the project file insert after:
  
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  
  the following line:
  
  <Import Project="<full path to Babel.Build.targets file>" />
  
  for example:
  <Import Project="C:\Program Files\Babel\MSBuild\Babel.Build.targets" />

3) Reload Project and rebuild. If everything is OK you should see the
   babel output into the Visual Studio Output panel.

- How to add a XML rules file to a Visual Studio Project 

1) Select the project node into the Solution Explorer
2) Right click and choose Add -> New Item...
3) Select XML file and give it the following name: BabelRules.xml
4) Fill the XML file with rule definitions
5) Save and build the project

***********************************************************************************************
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!--
    ============================================================
                           Configuration

    Update this section according your babel installation 
    configuration.
    ============================================================
    -->
  <!-- Uncomment following line if Babel.Build.dll is installed into the GAC -->
  <UsingTask TaskName="Babel" AssemblyName="Babel.Build, Version=2.0.0.0, Culture=neutral, PublicKeyToken=138d17b5bd621ab7" />
  <!-- Uncomment following line if Babel.Build.dll is installed into a local folder
    AssemblyFile attribute must contains the full path to Babel.Build.dll
    
    <UsingTask TaskName="Babel" AssemblyFile="C:\Program Files\Babel\MSBuild\Babel.Build.dll" />
    -->
  <PropertyGroup>
    <!-- Set the path to the directory where babel.exe is installed. -->
    <BabelDirectory>C:\Program Files (x86)\Babel\</BabelDirectory>
  </PropertyGroup>
  <!--
    ============================================================
                         Babel Properties

    Several properties that can be overridden in .*proj files. 
    ============================================================
    -->
  <PropertyGroup>
    <EnableObfuscation>true</EnableObfuscation>
    <BabelOutputFile>
    </BabelOutputFile>
    <EnableObfuscationAgent>true</EnableObfuscationAgent>
    <GenerateDebug>false</GenerateDebug>
    <BabelRulesFileName>BabelRules.xml</BabelRulesFileName>
    <BableRulesPath Condition="Exists('$(ProjectDir)$(BabelRulesFileName)')">$(ProjectDir)$(BabelRulesFileName)</BableRulesPath>
    <BabelMapOutFile>
    </BabelMapOutFile>
    <FlattenNamespaces>true</FlattenNamespaces>
    <UnicodeNormalization>true</UnicodeNormalization>
    <ObfuscateTypes>true</ObfuscateTypes>
    <ObfuscateEvents>true</ObfuscateEvents>
    <ObfuscateMethods>true</ObfuscateMethods>
    <ObfuscateProperties>true</ObfuscateProperties>
    <ObfuscateFields>true</ObfuscateFields>
    <VirtualFunctions>true</VirtualFunctions>
    <ObfuscateMsil>true</ObfuscateMsil>
    <ILIterations>3</ILIterations>
    <EmitInvalidOpcodes>true</EmitInvalidOpcodes>
    <StringEncryption>false</StringEncryption>
    <SuppressIldasm>true</SuppressIldasm>
    <DeadCodeElimination>false</DeadCodeElimination>
    <ShowStatistics>true</ShowStatistics>
    <VerboseLevel>2</VerboseLevel>
  </PropertyGroup>
  <!--
    ============================================================
                              Build

    The main build entry point with Obfuscate target 
    performed after AfterBuild target.
    ============================================================
    -->
  <PropertyGroup>
    <BuildDependsOn>
            BeforeBuild;
            CoreBuild;            
            AfterBuild;
            Obfuscate;
        </BuildDependsOn>
  </PropertyGroup>
  <!--
    ============================================================
                       Obfuscate Target
                       
    ============================================================
    -->
  <Target Name="Obfuscate" DependsOnTargets="AfterBuild" Condition="'$(EnableObfuscation)'">
    <Babel BabelDirectory="$(BabelDirectory)" InputFile="$(TargetPath)" OutputFile="$(BabelOutputFile)" RulesFile="$(BableRulesPath)" MapOutFile="$(BabelMapOutFile)" EnableObfuscationAgent="$(EnableObfuscationAgent)" FlattenNamespaces="$(FlattenNamespaces)" UnicodeNormalization="$(UnicodeNormalization)" ObfuscateTypes="$(ObfuscateTypes)" ObfuscateEvents="$(ObfuscateEvents)" ObfuscateMethods="$(ObfuscateMethods)" ObfuscateProperties="$(ObfuscateProperties)" ObfuscateFields="$(ObfuscateFields)" VirtualFunctions="$(VirtualFunctions)" ObfuscateMsil="$(ObfuscateMsil)" ILIterations="$(ILIterations)" EmitInvalidOpcodes="$(EmitInvalidOpcodes)" StringEncryption="$(StringEncryption)" SuppressIldasm="$(SuppressIldasm)" DeadCodeElimination="$(DeadCodeElimination)" GenerateDebug="$(GenerateDebug)" VerboseLevel="$(VerboseLevel)" KeyContainer="$(KeyContainerName)" KeyFile="$(KeyOriginatorFile)" ShowStatistics="$(ShowStatistics)" />
  </Target>
</Project>