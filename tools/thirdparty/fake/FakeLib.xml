<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>FakeLib</name></assembly>
<members>
<member name="T:AssemblyInfo.ReturnExceptione9955f10af5145dcb24430a7d79d9b83Exception">

</member>
<member name="T:AssemblyInfo.ReturnNoneExceptione9955f10af5145dcb24430a7d79d9b83Exception">

</member>
<member name="T:AssemblyInfo">

</member>
<member name="T:Fake.AssemblyInfoParams">

</member>
<member name="T:Fake.BuildScriptMode">
<summary>
 Build script mode
</summary>
</member>
<member name="T:Fake.CodeLanguage">

</member>
<member name="T:Fake.FileIncludes">

</member>
<member name="T:Fake.FileSet">

</member>
<member name="T:Fake.FxCopParams">

</member>
<member name="T:Fake.FxCopyErrorLevel">

</member>
<member name="T:Fake.NUnitParams">

</member>
<member name="T:Fake.PostMethod">

</member>
<member name="T:Fake.RegexEntry">

</member>
<member name="T:Fake.TestCase">

</member>
<member name="P:Fake.TestSuite.TestCount">

</member>
<member name="P:Fake.TestSuite.Success">

</member>
<member name="P:Fake.TestSuite.Skipped">

</member>
<member name="P:Fake.TestSuite.Runtime">

</member>
<member name="P:Fake.TestSuite.NotRun">

</member>
<member name="P:Fake.TestSuite.Ignored">

</member>
<member name="P:Fake.TestSuite.Executed">

</member>
<member name="P:Fake.TestSuite.Errors">

</member>
<member name="T:Fake.TestSuite">

</member>
<member name="T:Fake.TwitterAction">
<summary>
 The various actions used at Twitter. Not all actions works on all object types.
 For more information about the actions types and the supported functions Check the 
 Twitter documentation at: http://groups.google.com/group/twitter-development-talk/web/api-documentation
</summary>
</member>
<member name="T:Fake.TwitterClientInfo">

</member>
<member name="T:Fake.TwitterFormat">
<summary>
 The output formats supported by Twitter. Not all of them can be used with all of the functions.
 For more information about the output formats and the supported functions check the 
 Twitter documentation at: http://groups.google.com/group/twitter-development-talk/web/api-documentation
</summary>
</member>
<member name="T:Fake.TwitterObject">
<summary>
 The various object types supported at Twitter.
</summary>
</member>
<member name="M:Fake.AssemblyInfoHelper.AssemblyInfo(Microsoft.FSharp.Core.FastFunc`2{Fake.AssemblyInfoParams,Fake.AssemblyInfoParams})">
<summary>
 Generates an AssemblyInfo file for projects
</summary>
</member>
<member name="M:Fake.AssemblyInfoHelper.generateFile(Fake.AssemblyInfoParams,System.Collections.Generic.Dictionary`2{System.String,System.String},System.Collections.Generic.IEnumerable`1{System.String},System.IO.TextWriter)">
<summary>
 generates the assembly info file
</summary>
</member>
<member name="T:Fake.AssemblyInfoHelper">

</member>
<member name="M:Fake.FSCHelper.clearOutputPath(System.String)">

</member>
<member name="M:Fake.FSCHelper.compileBuildScript(System.String)">
<summary>
 Compiles a build script with fsc  
</summary>
</member>
<member name="M:Fake.FSCHelper.copyFiles(System.String)">
<summary>
 copy all fake tool files to temp path  
</summary>
</member>
<member name="P:Fake.FSCHelper.fsc">
<summary>
 F-Sharp Compiler
 Microsoft Windows [Version 6.0.6001]
 Copyright (c) 2006 Microsoft Corporation. Alle Rechte vorbehalten.
 
 C:\Program Files (x86)\FSharp-1.9.6.2\bin>fsc /?
 Microsoft F# Compiler, (c) Microsoft Corporation, All Rights Reserved
 F# Version 1.9.6.2, compiling for .NET Framework Version v2.0.50727
 
 
                 - OUTPUT FILES -
 --out <string>                Name of the output file (Short form: -o)
 --target exe <string>         Build an executable with a console
 --target winexe <string>      Build an executable without a stdin/stdout/stderr
 --target library <string>     Build a library (Short form: -a)
 --target module <string>      Build a module that can be added to another
                               assembly
 --delaysign[+|-]              Delay-sign the assembly using only the public
                               portion of the strong name key
 --doc <string>                Write the xmldoc of the assembly to the given
                               file.
 --keyfile <string>            Specify a strong name key file
 --platform <string>           Limit which platforms this code can run on:
                               x86, Itanium, x64 or anycpu. The default is
                               anycpu
 --nooptimizationdata          Only include optimization information essential
                               for implementing inlined constructs. Inhibits
                               cross-module inlining but improves binary
                               compatibility
 --nointerfacedata             Don't add a resource to the generated assembly
                               containing F#-specific metadata
 --sig <string>                Print the inferred interface of the assembly
                               to a file
 
 
                 - INPUT FILES -
 --reference <string>          Reference an F# or .NET assembly (Short form: -r)
 
 
                 - RESOURCES -
 --win32res <string>           Specify a Win32 resource file (.res)
 --resource <string>           Embed the specified managed resource
 --linkresource <string>       Link the specified resource to this assembly
                               where the resinfo format is
                                   <file>[,<string name>[,public|private]]
 
 
                 - CODE GENERATION -
 --debug[+|-]                  Emit debug information (Short form: -g)
 --debug <string>              Specify debugging type: full, pdbonly. default,
                               ('full' is the default and enables attaching a
                               debugger to a running program)
 --optimize[+|-]               Enable optimizations (Short form: -O)
 --optimize[+|-] <string list> Control specific optimizations (Short form: -O)
                               The following optimizations may be selectively
                               enabled or disabled: nojitoptimize,
                               nojittracking, nolocaloptimize, nocrossoptimize,
                               notailcalls
 
 
                 - ERRORS AND WARNINGS -
 --warnaserror[+|-]            Report all warnings as errors
 --warnaserror[+|-] <int list> Report specific warnings as errors
 --warn <int>                  Set a warning level (0-4)
 --nowarn <string list>        Disable specific warning messages
 
 
                 - LANGUAGE -
 --checked[+|-]                Generate overflow checks
 --define <string>             Define conditional compilation symbols (Short
                               form: -d)
 --mlcompatibility             Ignore OCaml-compatibility warnings.
 
 
                 - HTML -
 --generatehtml                Generate HTML documentation
 --htmloutputdir <string>      Output directory for HTML documentation
 --htmlcss <string>            Set the name of the Cascading Style Sheet
 --htmlnamespacefile <string>  Set the name of the master namespaces.html
                               file assumed to be in the output directory
 --htmlnamespacefileappend     Append to the master namespace file when
                               generating HTML documentation
 
 
                 - MISCELLANEOUS -
 --nologo                      Don't show the splash text on startup
 --help                        Display this usage message (Short form: -?)
 
 
                 - ADVANCED -
 --baseaddress <string>        Base address for the library to be built
 --codepage <int>              Specify the codepage used to read source files
 --utf8output                  Output compiler messages in UTF-8 encoding
 --fullpaths                   Compiler generates fully qualified paths
 --cliroot <string>            Use to override where the compiler looks for
                               mscorlib.dll and framework components
 --cliversion <string>         Version of the framework to target (for
                               example, 2.0, 3.0 or 3.5). The default is 2.0
 --noframework                 Do not reference the .NET Framework assemblies
                               by default
 --times                       Display timing profiles for compilation
 --standalone                  Statically link the F# library and all
                               referenced DLLs that depend on it into the
                               assembly being generated.
 --staticlink <string>         Statically link the given assembly and all
                               referenced DLLs that depend on this assembly.
                               Use an assembly name e.g. mylib, not a DLL name
 --pdb <string>                Name the output debug file
 --lib <string list>           Specify a directory for the include path (Short
                               form: -I)  
</summary>
</member>
<member name="M:Fake.FSCHelper.getOutput(System.String)">
<summary>
 Generates the output file name of a build script filename
 If the build script doesn't exists it raises an exception    
</summary>
</member>
<member name="M:Fake.FSCHelper.getOutputPath(System.String)">

</member>
<member name="M:Fake.FSCHelper.getWorkingDir(System.String)">
<summary>
 gets the fake working directory  
</summary>
</member>
<member name="M:Fake.FSCHelper.runBuildScript(System.String,System.Collections.Generic.IEnumerable`1{Microsoft.FSharp.Core.Tuple`2{System.String,System.String}})">
<summary>
 First compiles a build script and then runs it
</summary>
</member>
<member name="T:Fake.FSCHelper">

</member>
<member name="M:Fake.FileHelper.AppendTextFiles(System.String,System.Collections.Generic.IEnumerable`1{System.String})">
<summary>
 Appends all given files to one file 
</summary>
</member>
<member name="M:Fake.FileHelper.CleanDir(System.String)">
<summary>
 Cleans a directory
</summary>
</member>
<member name="M:Fake.FileHelper.CompareDir(System.Boolean,System.String,System.String,System.String)">
<summary>
 Compares two directories for changes
 If delete = true then equal files will be removed 
 Use simple filePattern like *.txt
 Use this task to create patches
</summary>
</member>
<member name="M:Fake.FileHelper.CompareFiles(System.Boolean,System.String,System.String)">
<summary>
 Compares the given files for changes
 If delete = true then equal files will be removed  
</summary>
</member>
<member name="M:Fake.FileHelper.Copy(System.String,System.Collections.Generic.IEnumerable`1{System.String})">
<summary>
 Copies the files to the target
</summary>
</member>
<member name="M:Fake.FileHelper.CopyFile(System.String,System.String)">
<summary>
 Copies a single file to the target
   param target: The targetDirectory
   param file: The fileName
</summary>
</member>
<member name="M:Fake.FileHelper.CopyFiles(System.String,System.Collections.Generic.IEnumerable`1{System.String})">
<summary>
 Copies the files to the target
</summary>
</member>
<member name="M:Fake.FileHelper.CreateDir(System.String)">
<summary>
 Creates a directory if it does not exist
</summary>
</member>
<member name="M:Fake.FileHelper.CreateFile(System.String)">
<summary>
 Creates a file if it does not exist
</summary>
</member>
<member name="M:Fake.FileHelper.DeleteDir(System.String)">
<summary>
 Deletes a directory if it exists
</summary>
</member>
<member name="M:Fake.FileHelper.DeleteFile(System.String)">
<summary>
 Deletes a file if it exist
</summary>
</member>
<member name="M:Fake.FileHelper.FullName(System.String)">
<summary>
 Converts a file to it's full file system name
</summary>
</member>
<member name="M:Fake.FileHelper.ReadCSVFile(System.String)">
<summary>
 Reads a csv file line by line
 delimiter is a ,
</summary>
</member>
<member name="M:Fake.FileHelper.ReadFile(System.String)">
<summary>
 Reads a file line by line
</summary>
</member>
<member name="M:Fake.FileHelper.SetDirReadOnly(System.Boolean,System.IO.DirectoryInfo)">
<summary>
 Sets all files in the directory readonly 
</summary>
</member>
<member name="M:Fake.FileHelper.SetReadOnly(System.Boolean,System.Collections.Generic.IEnumerable`1{System.String})">
<summary>
 Sets all files in the directory readonly 
</summary>
</member>
<member name="M:Fake.FileHelper.SilentCopy(System.String,System.Collections.Generic.IEnumerable`1{System.String})">

</member>
<member name="M:Fake.FileHelper.TestDir(System.String)">
<summary>
 Checks if the directory exists
</summary>
</member>
<member name="M:Fake.FileHelper.setDirectoryReadOnly(System.Boolean,System.IO.DirectoryInfo)">
<summary>
 Sets the directory readonly 
</summary>
</member>
<member name="M:Fake.FileHelper.|EndsWith|_|(System.String,System.String)">
<summary>
 Active Pattern for determining file extension
</summary>
</member>
<member name="M:Fake.FileHelper.|FileInfoFullName|(System.IO.FileInfo)">
<summary>
 Active Pattern for determining file name   
</summary>
</member>
<member name="M:Fake.FileHelper.|FileInfoNameSections|(System.IO.FileInfo)">
<summary>
 Active Pattern for determining FileInfoNameSections
</summary>
</member>
<member name="M:Fake.FileHelper.|File|Directory|(System.IO.FileSystemInfo)">

</member>
<member name="T:Fake.FileHelper">

</member>
<member name="M:Fake.FileSetHelper.AddBaseDir(System.String,Fake.FileIncludes)">
<summary>
 Adds a directory as baseDirectory for fileIncludes  
</summary>
</member>
<member name="M:Fake.FileSetHelper.Files(System.Collections.Generic.IEnumerable`1{System.String},Microsoft.FSharp.Collections.FSharpList`1{System.String},Microsoft.FSharp.Collections.FSharpList`1{System.String})">
<summary>
 Searches the directories recursively for files and directories matching 
 the search criteria.    
</summary>
</member>
<member name="M:Fake.FileSetHelper.Include(System.String)">
<summary>
 Include files  
</summary>
</member>
<member name="M:Fake.FileSetHelper.Log(System.String,System.Collections.Generic.IEnumerable`1{System.String})">
<summary>
 Logs the given files with the message  
</summary>
</member>
<member name="M:Fake.FileSetHelper.Scan(Fake.FileIncludes)">
<summary>
 Lazy scan for include files
 Will be processed at the time when needed
</summary>
</member>
<member name="M:Fake.FileSetHelper.ScanImmediately(Fake.FileIncludes)">
<summary>
 Scans immediately for include files
 Files will be memoized
</summary>
</member>
<member name="M:Fake.FileSetHelper.SetBaseDir(System.String,Fake.FileIncludes)">
<summary>
 Sets a directory as baseDirectory for fileIncludes  
</summary>
</member>
<member name="M:Fake.FileSetHelper.baseDirectory(System.String)">
<summary>
 The base directory to scan. The default is the 
 <see cref="Environment.CurrentDirectory">current directory</see>.
</summary>
</member>
<member name="P:Fake.FileSetHelper.cachedCaseInsensitiveRegexes">

</member>
<member name="P:Fake.FileSetHelper.cachedCaseSensitiveRegexes">

</member>
<member name="M:Fake.FileSetHelper.cleanPath(System.String)">
<summary>
 Patterns can use either / \ as a directory separator.
 cleanPath replaces both of these characters with Path.DirectorySeparatorChar
</summary>
</member>
<member name="M:Fake.FileSetHelper.cleanPathBuilder(System.String)">
<summary>
 Patterns can use either / \ as a directory separator.
 cleanPath replaces both of these characters with Path.DirectorySeparatorChar
</summary>
</member>
<member name="M:Fake.FileSetHelper.combinePath(System.String,System.String)">

</member>
<member name="M:Fake.FileSetHelper.convertPatterns(System.IO.DirectoryInfo,Microsoft.FSharp.Collections.FSharpList`1{System.String})">
<summary>
 Parses specified search patterns for search directories and 
 corresponding regex patterns.
</summary>
</member>
<member name="M:Fake.FileSetHelper.endsWithChar(System.String,System.Char)">
<summary>
 Determines whether the last character of the given <see cref="string" />
 matches the specified character.    
</summary>
</member>
<member name="M:Fake.FileSetHelper.endsWithSlash(System.String)">
<summary>
 Determines whether the last character of the given <see cref="string" />
 matches Path.DirectorySeparatorChar.         
</summary>
</member>
<member name="M:Fake.FileSetHelper.ensureEndsWithSlash(System.String)">
<summary>
 Ensures that the last character of the given <see cref="string" />
 matches Path.DirectorySeparatorChar.          
</summary>
</member>
<member name="M:Fake.FileSetHelper.isPathIncluded(System.String,System.Boolean,System.Globalization.CompareOptions,Microsoft.FSharp.Collections.FSharpList`1{System.String},Microsoft.FSharp.Collections.FSharpList`1{Fake.RegexEntry},Microsoft.FSharp.Collections.FSharpList`1{System.String},Microsoft.FSharp.Collections.FSharpList`1{Fake.RegexEntry})">

</member>
<member name="M:Fake.FileSetHelper.op_BangPlus(System.String)">
<summary>
 Include prefix operator
</summary>
</member>
<member name="M:Fake.FileSetHelper.op_MinusMinus(Fake.FileIncludes,System.String)">
<summary>
 Exclude operator
</summary>
</member>
<member name="M:Fake.FileSetHelper.op_PlusPlus(Fake.FileIncludes,System.String)">
<summary>
 Add Include operator
</summary>
</member>
<member name="M:Fake.FileSetHelper.parseSearchDirectoryAndPattern(System.IO.DirectoryInfo,System.String)">
<summary>
 Given a search pattern returns a search directory and an regex search pattern.
</summary>
</member>
<member name="M:Fake.FileSetHelper.regexPattern(System.String)">
<summary>
 Converts search pattern to a regular expression pattern.
</summary>
</member>
<member name="M:Fake.FileSetHelper.scanDirectory(System.Boolean,Microsoft.FSharp.Collections.FSharpList`1{System.String},Microsoft.FSharp.Collections.FSharpList`1{Fake.RegexEntry},Microsoft.FSharp.Collections.FSharpList`1{System.String},Microsoft.FSharp.Collections.FSharpList`1{Fake.RegexEntry},System.String,System.Boolean)">
<summary>
 Searches a directory recursively for files and directories matching 
 the search criteria.
</summary>
</member>
<member name="M:Fake.FileSetHelper.testRegex(System.Boolean,System.String,Fake.RegexEntry)">

</member>
<member name="T:Fake.FileSetHelper">

</member>
<member name="M:Fake.FxCopHelper.FxCop(Microsoft.FSharp.Core.FastFunc`2{Fake.FxCopParams,Fake.FxCopParams},System.Collections.Generic.IEnumerable`1{System.String})">
<summary>
 Run FxCop on a group of assemblies.
</summary>
</member>
<member name="M:Fake.FxCopHelper.checkForErrors(System.String)">

</member>
<member name="P:Fake.FxCopHelper.toolName">

</member>
<member name="T:Fake.FxCopHelper">

</member>
<member name="M:Fake.HTMLHelpWorkShopHelper.CompileHTMLHelpProject(System.String,System.String)">
<summary>
 Uses the HTML Help Workshop to compile a help project
   param helpCompiler: The filename of the HTML Help WorkShop tool
   param projectFile: the fileName of the help project 
   returns: The generated files (fileNames)
</summary>
</member>
<member name="T:Fake.HTMLHelpWorkShopHelper">

</member>
<member name="M:Fake.MSBuildHelper.CopyRecursive(System.String,System.String,System.Boolean)">
<summary>
 Copies the file structure recursive
</summary>
</member>
<member name="M:Fake.MSBuildHelper.MSBuild(System.String,System.String,System.Collections.Generic.IEnumerable`1{System.String})">
<summary>
 Builds the given project files and collects the output files
</summary>
</member>
<member name="M:Fake.MSBuildHelper.build(System.String,System.String,System.String)">
<summary>
 Runs a msbuild project
</summary>
</member>
<member name="M:Fake.MSBuildHelper.copyRecursive(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.Boolean)">
<summary>
 Copies the file structure recursive
</summary>
</member>
<member name="P:Fake.MSBuildHelper.frameworkPath">
<summary>
 Path to .NET Framework
</summary>
</member>
<member name="P:Fake.MSBuildHelper.msBuildExe">
<summary>
 MSBuild exe fileName
</summary>
</member>
<member name="T:Fake.MSBuildHelper">

</member>
<member name="M:Fake.MSMQHelper.WaitForMessageFile(System.String,System.TimeSpan)">
<summary>
 Waits for another application to create a output file
 if the timeout is reached an exception will be raised
</summary>
</member>
<member name="M:Fake.MSMQHelper.WaitForMessageFiles(System.Collections.Generic.IEnumerable`1{System.String},System.TimeSpan)">
<summary>
 Waits for other applications to create a output files
 if the timeout is reached an exception will be raised
</summary>
</member>
<member name="T:Fake.MSMQHelper">

</member>
<member name="M:Fake.NUnitHelper.NUnit(Microsoft.FSharp.Core.FastFunc`2{Fake.NUnitParams,Fake.NUnitParams},System.Collections.Generic.IEnumerable`1{System.String})">
<summary>
 Run NUnit on a group of assemblies.
</summary>
</member>
<member name="P:Fake.NUnitHelper.toolName">

</member>
<member name="M:Fake.NUnitHelper.writeXMLOutput(Fake.TestSuite,System.String)">
<summary>
 writes the given TestSuite as XML file in NUnit style
</summary>
</member>
<member name="T:Fake.NUnitHelper">

</member>
<member name="M:Fake.ProcessHelper.ExecProcess(Microsoft.FSharp.Core.FastFunc`2{System.Diagnostics.ProcessStartInfo,Microsoft.FSharp.Core.Unit})">
<summary>
 Runs the given process
 returns the exit code
</summary>
</member>
<member name="M:Fake.ProcessHelper.UseDefaults``1">
<summary>
 Use default Parameters
</summary>
</member>
<member name="M:Fake.ProcessHelper.execProcess(Microsoft.FSharp.Core.FastFunc`2{System.Diagnostics.ProcessStartInfo,Microsoft.FSharp.Core.Unit})">
<summary>
 Runs the given process
 returns true if the exit code was 0
</summary>
</member>
<member name="M:Fake.ProcessHelper.toParam(System.String)">
<summary>
 Adds quotes around the string   
</summary>
</member>
<member name="T:Fake.ProcessHelper">

</member>
<member name="T:Fake.TargetHelper.Target">

</member>
<member name="M:Fake.TargetHelper.ActivateFinalTarget(System.String)">
<summary>
 Activates the FinalTarget
</summary>
</member>
<member name="M:Fake.TargetHelper.Dependencies(System.String,Microsoft.FSharp.Collections.FSharpList`1{System.String})">
<summary>
 Adds the dependencies to the list of dependencies  
</summary>
</member>
<member name="M:Fake.TargetHelper.Dependency(System.String,System.String)">
<summary>
 Adds the dependency to the list of dependencies
</summary>
</member>
<member name="M:Fake.TargetHelper.DoNothing">
<summary>
 Do nothing -  fun () -> ()   
</summary>
</member>
<member name="P:Fake.TargetHelper.ExecutedTargets">

</member>
<member name="M:Fake.TargetHelper.FinalTarget(System.String,Microsoft.FSharp.Core.FastFunc`2{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Registers a final target (not activated)
</summary>
</member>
<member name="P:Fake.TargetHelper.FinalTargets">
<summary>
 Final Targets 
 Stores target and if it is activated
</summary>
</member>
<member name="M:Fake.TargetHelper.Target(System.String,Microsoft.FSharp.Core.FastFunc`2{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Creates a Target
</summary>
</member>
<member name="P:Fake.TargetHelper.TargetDict">
<summary>
 TargetDictionary  
</summary>
</member>
<member name="P:Fake.TargetHelper.errorOccured">

</member>
<member name="M:Fake.TargetHelper.getBuildParam(System.String)">
<summary>
 Returns the value of the buildParam  
</summary>
</member>
<member name="M:Fake.TargetHelper.getTarget(System.String)">
<summary>
 Gets a Target from the Target dictionary
</summary>
</member>
<member name="M:Fake.TargetHelper.hasBuildParam(System.String)">
<summary>
 Returns if the buildParam is set  
</summary>
</member>
<member name="M:Fake.TargetHelper.op_LessEqualsEquals(System.String,Microsoft.FSharp.Collections.FSharpList`1{System.String})">
<summary>
 Dependencies operator
</summary>
</member>
<member name="M:Fake.TargetHelper.run(System.String)">
<summary>
 Runs a Target and its dependencies        
</summary>
</member>
<member name="M:Fake.TargetHelper.runFinalTargets">
<summary>
 runs all activated final targets (in alphabetically order)
</summary>
</member>
<member name="T:Fake.TargetHelper">

</member>
<member name="M:Fake.TeamCityHelper.sendTeamCityError(System.String)">
<summary>
 Sends an error to TeamCity
</summary>
</member>
<member name="M:Fake.TeamCityHelper.sendTeamCityFXCopImport(System.String)">
<summary>
 Sends an FXCop results filename to TeamCity    
</summary>
</member>
<member name="M:Fake.TeamCityHelper.sendTeamCityNUnitImport(System.String)">
<summary>
 Sends an NUnit results filename to TeamCity
</summary>
</member>
<member name="M:Fake.TeamCityHelper.sendToTeamCity(Microsoft.FSharp.Text.PrintfFormat`4{Microsoft.FSharp.Core.FastFunc`2{System.String,Microsoft.FSharp.Core.Unit},System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit},System.String)">
<summary>
 Send message to TeamCity
</summary>
</member>
<member name="P:Fake.TeamCityHelper.teamCityMessages">
<summary>
 Get TeamCity status from config file
</summary>
</member>
<member name="T:Fake.TeamCityHelper">

</member>
<member name="M:Fake.TraceHelper.RemoveLineBreaks(System.String)">
<summary>
 Removes linebreaks from the given string
</summary>
</member>
<member name="M:Fake.TraceHelper.TraceEnvironmentVariables">
<summary>
 Traces the EnvironmentVariables
</summary>
</member>
<member name="P:Fake.TraceHelper.fakePath">
<summary>
 Gets the path of the current FAKE isnatnce
</summary>
</member>
<member name="P:Fake.TraceHelper.fakeVersion">
<summary>
 Gets the FAKE Version string
</summary>
</member>
<member name="M:Fake.TraceHelper.log(System.String)">
<summary>
 logs the specified string        
</summary>
</member>
<member name="M:Fake.TraceHelper.logColored(System.Boolean,System.String,System.ConsoleColor)">
<summary>
 Writes a trace to the command line (in the given color)
</summary>
</member>
<member name="M:Fake.TraceHelper.logMessage(System.Boolean,System.String)">
<summary>
 logs the specified string        
</summary>
</member>
<member name="M:Fake.TraceHelper.separated(System.String,System.Collections.Generic.IEnumerable`1{System.String})">
<summary>
 Converts a sequence of strings to a string with delimiters
</summary>
</member>
<member name="M:Fake.TraceHelper.toRelativePath(System.String)">
<summary>
 Replaces the absolute path to a relative
</summary>
</member>
<member name="M:Fake.TraceHelper.trace(System.String)">
<summary>
 Writes a trace to the command line (in green)
</summary>
</member>
<member name="M:Fake.TraceHelper.traceError(System.String)">
<summary>
 Traces an error (in red)
</summary>
</member>
<member name="M:Fake.TraceHelper.traceFAKE(System.String)">
<summary>
 Writes a trace to the command line (in yellow)
</summary>
</member>
<member name="M:Fake.TraceHelper.traceImportant(System.String)">
<summary>
 Writes a trace to stderr (in green)  
</summary>
</member>
<member name="T:Fake.TraceHelper">

</member>
<member name="P:Fake.TwitterHelper.ACCESS_TOKEN">

</member>
<member name="P:Fake.TwitterHelper.AUTHORIZE">

</member>
<member name="M:Fake.TwitterHelper.ExecuteGetCommand(System.String,System.String,System.String)">
<summary>
 Executes an HTTP GET command and retrives the information.    
   param userName: The username to use with the request
   param password: The password to use with the request
   param url: The URL to perform the GET operation  
   returns: The response of the request, or null if we got 404 or nothing.
</summary>
</member>
<member name="M:Fake.TwitterHelper.ExecutePostCommand(Fake.TwitterClientInfo,System.String,System.String,System.String,System.String)">
<summary>
 Executes an HTTP POST command and retrives the information.    
 This function will automatically include a "source" parameter if the "Source" property is set.
   param clientInfo: The client information to perform the POST operation  
   param url: The URL to perform the POST operation
   param userName: The username to use with the request
   param password: The password to use with the request
   param data: The data to post
   returns: The response of the request, or null if we got 404 or nothing.
</summary>
</member>
<member name="M:Fake.TwitterHelper.GetAsXML(Microsoft.FSharp.Core.FastFunc`2{Fake.TwitterFormat,System.String},Fake.TwitterFormat)">
<summary>
 Gets the public timeline as Xml
</summary>
</member>
<member name="M:Fake.TwitterHelper.GetFeatured(System.String,System.String,Fake.TwitterFormat)">
<summary>
 Gets the featured info
</summary>
</member>
<member name="M:Fake.TwitterHelper.GetFeaturedAsXML(System.String,System.String)">
<summary>
 Gets the featured info as XML
</summary>
</member>
<member name="M:Fake.TwitterHelper.GetFollowers(System.String,System.String,System.String,Fake.TwitterFormat)">
<summary>
 Gets the user's follower
</summary>
</member>
<member name="M:Fake.TwitterHelper.GetFollowersAsXML(System.String,System.String,System.String)">
<summary>
 Gets the users timeline as XML
</summary>
</member>
<member name="M:Fake.TwitterHelper.GetFriends(System.String,System.String,System.String,Fake.TwitterFormat)">
<summary>
 Gets the user's friends
</summary>
</member>
<member name="M:Fake.TwitterHelper.GetFriendsAsXML(System.String,System.String,System.String)">
<summary>
 Gets the user's friends as XML
</summary>
</member>
<member name="M:Fake.TwitterHelper.GetFriendsTimeline(System.String,System.String,Fake.TwitterFormat)">
<summary>
 Gets the friends timeline
</summary>
</member>
<member name="M:Fake.TwitterHelper.GetFriendsTimelineAsXML(System.String,System.String,Fake.TwitterFormat)">
<summary>
 Gets the users timeline as XML
</summary>
</member>
<member name="M:Fake.TwitterHelper.GetPublicTimeline(Fake.TwitterFormat)">
<summary>
 Gets the public timeline
</summary>
</member>
<member name="M:Fake.TwitterHelper.GetPublicTimelineAsXML(Fake.TwitterFormat)">
<summary>
 Gets the public timeline as Xml
</summary>
</member>
<member name="M:Fake.TwitterHelper.GetTestMessage(Fake.TwitterFormat)">
<summary>
 Tests the twitter server
</summary>
</member>
<member name="M:Fake.TwitterHelper.GetUserTimeline(System.String,System.String,System.String,Fake.TwitterFormat)">
<summary>
 Gets the users timeline
</summary>
</member>
<member name="M:Fake.TwitterHelper.GetUserTimelineAsXML(System.String,System.String,System.String,Fake.TwitterFormat)">
<summary>
 Gets the users timeline as XML
</summary>
</member>
<member name="P:Fake.TwitterHelper.REQUEST_TOKEN">

</member>
<member name="M:Fake.TwitterHelper.Show(System.String,System.String,System.String,Fake.TwitterFormat)">
<summary>
 Shows the user
</summary>
</member>
<member name="M:Fake.TwitterHelper.ShowAsXML(System.String,System.String,System.String)">
<summary>
 Shows the user as XML
</summary>
</member>
<member name="M:Fake.TwitterHelper.Update(Fake.TwitterClientInfo,System.String,System.String,System.String,Fake.TwitterFormat)">
<summary>
 Sends an update to twitter
</summary>
</member>
<member name="M:Fake.TwitterHelper.UpdateAsXML(Fake.TwitterClientInfo,System.String,System.String,System.String)">
<summary>
 Sends an update to twitter and gets the result as XML
</summary>
</member>
<member name="M:Fake.TwitterHelper.getUserUrl``3(``0,``1,System.String,``2,Fake.TwitterFormat)">

</member>
<member name="M:Fake.TwitterHelper.lowerString``1(``0)">

</member>
<member name="M:Fake.TwitterHelper.twitterURL``1(Fake.TwitterObject,``0,Fake.TwitterFormat)">
<summary>
 Generates a twitter url
</summary>
</member>
<member name="T:Fake.TwitterHelper">

</member>
<member name="M:Fake.XCopyHelper.XCopy(System.String,System.String)">
<summary>
 Performs a XCopy 
  param source: The source directory (fileName)
  param destination: The target directory (fileName)
</summary>
</member>
<member name="T:Fake.XCopyHelper">

</member>
<member name="M:Fake.XMLHelper.XMLRead(System.Boolean,System.String,System.String,System.String,System.String)">
<summary>
 Reads a value from a XML document using a XPath
</summary>
</member>
<member name="M:Fake.XMLHelper.XMLRead_Int(System.Boolean,System.String,System.String,System.String,System.String)">
<summary>
 Reads a value from a XML document using a XPath
 returns if the value is an int and the value
</summary>
</member>
<member name="M:Fake.XMLHelper.XmlAttribute``1(System.String,``0,System.Xml.XmlTextWriter)">
<summary>
 Writes an Xml attribute
</summary>
</member>
<member name="M:Fake.XMLHelper.XmlCDataElement(System.String,System.String,System.Xml.XmlTextWriter)">
<summary>
 Writes an CData element  
</summary>
</member>
<member name="M:Fake.XMLHelper.XmlComment(System.String,System.Xml.XmlTextWriter)">
<summary>
 Writes an Xml comment      
</summary>
</member>
<member name="M:Fake.XMLHelper.XmlEndElement(System.Xml.XmlTextWriter)">
<summary>
 Writes an Xml element end
</summary>
</member>
<member name="M:Fake.XMLHelper.XmlStartElement(System.String,System.Xml.XmlTextWriter)">
<summary>
 Writes an Xml element start
</summary>
</member>
<member name="M:Fake.XMLHelper.XmlWriter(System.String)">
<summary>
 Generates an XmlWriter    
</summary>
</member>
<member name="T:Fake.XMLHelper">

</member>
<member name="M:Fake.ZipHelper.CreateZip(System.String,System.String,System.String,System.Int32,System.Boolean,System.Collections.Generic.IEnumerable`1{System.String})">
<summary>
 Creates a zip file with the given files
</summary>
</member>
<member name="P:Fake.ZipHelper.DefaultZipLevel">
<summary>
 The default zip level
</summary>
</member>
<member name="M:Fake.ZipHelper.Zip(System.String,System.String,System.Collections.Generic.IEnumerable`1{System.String})">
<summary>
 Creates a zip file with the given files 
 Parameter 1: workingDir - The relative dir of the zip files. Use this parameter to influence directory structure within zip file.
 Parameter 2: fileName - The fileName of the resulting zip file.
 Parameter 3: files - A sequence with files to zip.
</summary>
</member>
<member name="M:Fake.ZipHelper.ZipFile(System.String,System.String)">
<summary>
 Creates a zip file with the given file 
 Parameter 1: fileName - The fileName of the resulting zip file.
 Parameter 2: fileName - The file to zip.
</summary>
</member>
<member name="T:Fake.ZipHelper">

</member>
</members>
</doc>
