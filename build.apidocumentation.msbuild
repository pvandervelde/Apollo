<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0"
         DefaultTargets="Run"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Build configuration -->
        <Configuration Condition=" '$(Configuration)' == '' ">Release</Configuration>
        <Platform Condition=" '$(Platform)' == ''">x64</Platform>
        <PlatformTranslated>$(Platform.Replace(" ",""))</PlatformTranslated>
        
        <!-- Directories -->
        <DirWorkspace>$(MSBuildProjectDirectory)</DirWorkspace>
        <DirPackages>$(DirWorkspace)\packages</DirPackages>
        <DirTools>$(DirWorkspace)\tools</DirTools>
        <DirTemplates>$(DirWorkspace)\templates</DirTemplates>
        <DirBuild>$(DirWorkspace)\build</DirBuild>
        <DirBuildBin>$(DirBuild)\bin\$(PlatformTranslated)\$(Configuration)</DirBuildBin>
        <DirBuildDoc>$(DirBuild)\doc</DirBuildDoc>
        <DirBuildLogs>$(DirBuild)\logs</DirBuildLogs>
        <DirBuildTemp>$(DirBuild)\temp</DirBuildTemp>
        
        <!-- Version number -->
        <VersionSemantic>0</VersionSemantic>
        
        <!-- Tools -->
        <MsBuildExtensionsPath>$(DirTools)\msbuild.extensions</MsBuildExtensionsPath>
    </PropertyGroup>
    
    <Import Project="$(MsBuildExtensionsPath)\FindToolDirectoryFromPackages.msbuild" 
            Condition="Exists('$(MsBuildExtensionsPath)\FindToolDirectoryFromPackages.msbuild')" />
    <Import Project="$(MsBuildExtensionsPath)\GetSemanticVersion.msbuild" 
            Condition="Exists('$(MsBuildExtensionsPath)\GetSemanticVersion.msbuild')" />
    <Import Project="$(MsBuildExtensionsPath)\SetEnvironmentVariable.msbuild"
            Condition="Exists('$(MsBuildExtensionsPath)\SetEnvironmentVariable.msbuild')"/>
    <Import Project="$(MsBuildExtensionsPath)\TemplateFile.msbuild"
            Condition="Exists('$(MsBuildExtensionsPath)\TemplateFile.msbuild')"/>

    <!-- Display info -->
    <Target Name="_DisplayInfo">
        <Message Text="Preparing workspace ..." />
    </Target>
    
    <Target Name="Run" DependsOnTargets="_DisplayInfo;_FindInstalledSandcastle;_BuildDocumentationWithInstalledSandcastle;_BuildDocumentationWithLocalSandcastle">
    </Target>
            
    <!-- Display info -->
    <Target Name="_DisplayInfo">
        <Message Text="Building API documentation ..." />
    </Target>
    
    <PropertyGroup>
        <FileSemanticVersion>$(DirBuildTemp)\semantic_version.json</FileSemanticVersion>
    </PropertyGroup>
    <Target Name="_GetSemanticVersion" DependsOnTargets="_DisplayInfo;">
        <GetSemanticVersion VersionFile="$(FileSemanticVersion)">
            <Output TaskParameter="VersionSemantic" PropertyName="VersionSemantic" />
        </GetSemanticVersion>
    </Target>
    
    <PropertyGroup>
        <DirSandcastle></DirSandcastle>
        <DirSandcastleHelpFileBuilder></DirSandcastleHelpFileBuilder>
    </PropertyGroup>
    <Target Name="_FindInstalledSandcastle" >
        <CreateProperty Value="$(DXROOT)" Condition="Exists('$(DXROOT)')">
            <Output TaskParameter="Value" PropertyName="DirSandcastle" />
        </CreateProperty>

        <CreateProperty Value="$(SHFBROOT)" Condition="Exists('$(SHFBROOT)')">
            <Output TaskParameter="Value" PropertyName="DirSandcastleHelpFileBuilder" />
        </CreateProperty>
    </Target>

    <PropertyGroup>
        <FileTemplateSandcastle>$(DirTemplates)\sandcastle.shfbproj.in</FileTemplateSandcastle>
        <FileGeneratedSandcastle>$(DirBuildTemp)\sandcastle.shfbproj</FileGeneratedSandcastle>
    </PropertyGroup>
    <Target Name="_GenerateTemplate" DependsOnTargets="_DisplayInfo;_GetSemanticVersion;_FindInstalledSandcastle">
        <ItemGroup>
            <SandcastleTokens Include="DirShfbRoot">
                <ReplacementValue>$(DirSandcastleHelpFileBuilder)</ReplacementValue>
            </SandcastleTokens>
            <SandcastleTokens Include="DirSandcastle">
                <ReplacementValue>$(DirSandcastle)</ReplacementValue>
            </SandcastleTokens>
            <SandcastleTokens Include="DirDoc">
                <ReplacementValue>$(DirBuildDoc)</ReplacementValue>
            </SandcastleTokens>
            <SandcastleTokens Include="DirLogs">
                <ReplacementValue>$(DirBuildLogs)</ReplacementValue>
            </SandcastleTokens>
            <SandcastleTokens Include="DirBin">
                <ReplacementValue>$(DirBuildBin)</ReplacementValue>
            </SandcastleTokens>
            <SandcastleTokens Include="Version">
                <ReplacementValue>$(VersionSemantic)</ReplacementValue>
            </SandcastleTokens>
        </ItemGroup>
        <TemplateFile Template="$(FileTemplateSandcastle)" OutputFileName="$(FileGeneratedSandcastle)" Tokens="@(SandcastleTokens)" />
    </Target>
    
    <Target Name="_BuildDocumentationWithInstalledSandcastle" DependsOnTargets="_GenerateTemplate" Condition="Exists('$(DirSandcastle)')">
        <Message Text="DirSandcastle = $(DirSandcastle)" />
        <Message Text="DirSandcastleHelpFileBuilder = $(DirSandcastleHelpFileBuilder)" />
        
        <!-- Run sandcastle via msbuild -->
        <Exec Command="&quot;$(MSBuildToolsPath)/msbuild.exe&quot; &quot;$(FileGeneratedSandcastle)&quot;" />
    </Target>
    
    <PropertyGroup>
        <FileSandcastleExe>BuildReflectionData.proj</FileSandcastleExe>
        <FileSandcastleHelpFileBuilderExe>SandcastleBuilderGUI.exe</FileSandcastleHelpFileBuilderExe>
    </PropertyGroup>
    <Target Name="_BuildDocumentationWithLocalSandcastle" DependsOnTargets="_GenerateTemplate" Condition="!Exists('$(DirSandcastle)')" >
        <FindToolDirectoryFromPackages PackagesDir="$(DirPackages)" FileToLocate="$(FileSandcastleExe)" Condition=" '$(DirSandcastle)' == '' ">
          <Output TaskParameter="Path" PropertyName="DirSandcastle" />
        </FindToolDirectoryFromPackages>

        <!-- 
            We're coming up one directory too deep (i.e. getting packages\sandcastle.1.2.3.4\data 
        -->
        <PropertyGroup>
            <DirSandcastle Condition=" '$(DirSandcastle)' != '' ">$([System.IO.Path]::GetDirectoryName($(DirSandcastle)))</DirSandcastle>
        </PropertyGroup>
        
        <FindToolDirectoryFromPackages PackagesDir="$(DirPackages)" FileToLocate="$(FileSandcastleHelpFileBuilderExe)">
          <Output TaskParameter="Path" PropertyName="DirSandcastleHelpFileBuilder" />
        </FindToolDirectoryFromPackages>
        
        <Message Text="DirSandcastle = $(DirSandcastle)" />
        <Message Text="DirSandcastleHelpFileBuilder = $(DirSandcastleHelpFileBuilder)" />
        
        <!-- 
            Set an environment variable for the sandcastle process. Note that MsBuild itself won't be able to pick this 
            variable up because MsBuild never reloads the Environment variables and the msbuild target
            runs the same instance of msbuild
        -->
        <SetEnvironmentVariable Name="DXROOT" Value="$(DirSandcastle)" />
        
        <!-- 
            Build reference data via msbuild. We need to do this via the 
            Exec task because we need a child process so that the change in environment 
            variables is picked up (MsBuild doesn't listen for changes in environment variables)
        -->
        <Exec Command="&quot;$(MSBuildToolsPath)/msbuild.exe&quot; &quot;$(DirSandcastle)\Data\BuildReflectionData.proj&quot; /p:ToolsRoot=$(DirSandcastle)" Condition="!Exists('$(DirSandcastle)\Data\Reflection')" />
        
        <!-- Run sandcastle via msbuild -->
        <Exec Command="&quot;$(MSBuildToolsPath)/msbuild.exe&quot; &quot;$(FileGeneratedSandcastle)&quot; /p:SHFBROOT=$(DirSandcastleHelpFileBuilder)" />
    </Target>
 </Project>