<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0"
         DefaultTargets="Run"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Build configuration -->
        <Configuration Condition=" '$(Configuration)' == '' ">Release</Configuration>
        <Platform Condition=" '$(Platform)' == ''">Any CPU</Platform>
        <PlatformTranslated>$(Platform.Replace(" ",""))</PlatformTranslated>
    
        <!-- Build flags -->
        <ShouldClean>true</ShouldClean>
        <ShouldCleanPackages>false</ShouldCleanPackages>
        
        <!-- Directories -->
        <DirWorkspace>$(MSBuildProjectDirectory)</DirWorkspace>
        <DirPackages>$(DirWorkspace)\packages</DirPackages>
        <DirTools>$(DirWorkspace)\tools</DirTools>
        <DirBuild>$(DirWorkspace)\build</DirBuild>
        <DirBuildBin>$(DirBuild)\bin\$(PlatformTranslated)\$(Configuration)</DirBuildBin>
        <DirBuildLogs>$(DirBuild)\logs</DirBuildLogs>
        <DirBuildTemp>$(DirBuild)\temp</DirBuildTemp>
        
        <!-- Version number -->
        <VersionMajor>0</VersionMajor>
        <VersionMinor>0</VersionMinor>
        <VersionBuild>0</VersionBuild>
        <VersionRevision>0</VersionRevision>
        
        <!-- Tools -->
        <MsBuildExtensionsPath>$(DirTools)\msbuild.extensions</MsBuildExtensionsPath>
        
        <!-- Jenkins, the build system adds the BZR_REVISION environment variable so we can get that here -->
        <BZR_REVISION Condition="'$(BZR_REVISION)' == '' ">-1</BZR_REVISION>
        <ScmRevision>$(BZR_REVISION)</ScmRevision>
    </PropertyGroup>
    
    <Import Project="$(MsBuildExtensionsPath)\OpenCover.msbuild"
            Condition="Exists('$(MsBuildExtensionsPath)\OpenCover.msbuild')"/>
    <Import Project="$(MsBuildExtensionsPath)\ReportGenerator.msbuild"
            Condition="Exists('$(MsBuildExtensionsPath)\ReportGenerator.msbuild')"/>
    <Import Project="$(MsBuildExtensionsPath)\ReportGeneratorOutputToCsv.msbuild"
            Condition="Exists('$(MsBuildExtensionsPath)\ReportGeneratorOutputToCsv.msbuild')"/> 

    <Target Name="Run" DependsOnTargets="_ExecuteUnitTestsWithoutCoverage;_ExecuteUnitTestsWithCoverage">
        <!-- Do nothing here -->
    </Target>
    
    <!-- Display info -->
    <Target Name="_DisplayInfo">
        <Message Text="Running unit tests ..." />
    </Target>
    
    <PropertyGroup>
        <MbUnitExe>Gallio.Echo.x86.exe</MbUnitExe>
        <MbUnitDir>$(DirPackages)\Gallio.Complete</MbUnitDir>
    </PropertyGroup>
    <Target Name="_ExecuteUnitTestsWithoutCoverage" Condition="!$(ShouldHaveCoverage) AND '$(Configuration)' != 'Deploy'" DependsOnTargets="_DisplayInfo">
        <MakeDir Directories="$(DirBuildLogs)" Condition="!Exists('$(DirBuildLogs)')" />
        
        <ItemGroup>
            <MbUnitTestAssemblies Include="$(DirBuildBin)\**\test.unit.*.dll" />
        </ItemGroup>
        
        <MbUnit MbUnitExe="$(MbUnitExe)"
                MbUnitDir="$(MbUnitDir)"
                OutputDir="$(DirBuildLogs)"
                TargetAssemblies="@(MbUnitTestAssemblies)"/>
    </Target>
    
    <PropertyGroup>
        <FileOpenCoverReport>$(DirBuildLogs)\opencover.xml</FileOpenCoverReport>
        <OpenCoverExe>opencover.console.exe</OpenCoverExe>
        <OpenCoverDir>$(DirPackages)\opencover</OpenCoverDir>
        <ReportGeneratorExe>ReportGenerator.exe</ReportGeneratorExe>
        <ReportGeneratorDir>$(DirPackages)\reportgenerator</ReportGeneratorDir>
        <ReportGeneratorOutputDir>$(DirBuildLogs)\coverage</ReportGeneratorOutputDir>
        <ReportGeneratorXmlSummaryFile>$(ReportGeneratorOutputDir)\Summary.xml</ReportGeneratorXmlSummaryFile>
        <CoverageCsvFile>$(DirBuildLogs)\coverage.csv</CoverageCsvFile>
    </PropertyGroup>
    <Target Name="_ExecuteUnitTestsWithCoverage" Condition="$(ShouldHaveCoverage) AND '$(Configuration)' != 'Deploy'" DependsOnTargets="_DisplayInfo">
        <MakeDir Directories="$(DirBuildTemp)" Condition="!Exists('$(DirBuildTemp)')" />
        <MakeDir Directories="$(DirBuildLogs)" Condition="!Exists('$(DirBuildLogs)')" />
        <MakeDir Directories="$(ReportGeneratorOutputDir)" Condition="!Exists('$(ReportGeneratorOutputDir)')" />
        
        <ItemGroup>
            <MbUnitTestAssemblies Include="$(DirBuildBin)\**\test.unit.*.dll" />
        </ItemGroup>
        <ItemGroup>
            <OpenCoverIgnoreAttributes Include="System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute" />
            <OpenCoverIgnoreAttributes Include="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
        </ItemGroup>
                                  
        <OpenCover OpenCoverExe="$(OpenCoverExe)"
                   OpenCoverDir="$(OpenCoverDir)"
                   OpenCoverOutput="$(FileOpenCoverReport)"
                   OpenCoverFilters="+[Apollo]* +[Apollo.*]* -[*Test.Unit*]* -[Gallio]* -[Gallio.*]*"
                   OpenCoverExcludeAttributes="@(OpenCoverIgnoreAttributes)"
                   UnitTestDir="$(MbUnitDir)"
                   UnitTestExe="$(MbUnitExe)"
                   UnitTestArguments="/hd:&quot;$(MbUnitDir)&quot; /sc /v:Verbose /rt:Xhtml-Condensed /rt:Xml-inline /rt:Text-Condensed /rt:Html-Condensed /rd:&quot;$(DirBuildLogs)&quot; /r:Local @(MbUnitTestAssemblies->'%22%(FullPath)%22', ' ')"
                   BinDir="$(DirBuildBin)" />
        
        <ReportGenerator ReportGeneratorExe="$(ReportGeneratorExe)"
                         ReportGeneratorDir="$(ReportGeneratorDir)"
                         OpenCoverOutputFile="$(FileOpenCoverReport)"
                         OutputDir="$(ReportGeneratorOutputDir)" />
                         
        <ReportGeneratorOutputToCsv InputFile="$(ReportGeneratorXmlSummaryFile)"
                                    OutputFile="$(CoverageCsvFile)" />
    </Target>
 </Project>