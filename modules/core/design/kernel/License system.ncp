<Project>
  <Name>License system</Name>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.2.1174.0, Culture=neutral, PublicKeyToken=null">
    <Name>License - overview</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Interface">
        <Name>ILicenseValidator</Name>
        <Access>Internal</Access>
        <Location left="1057" top="616" />
        <Size width="244" height="95" />
        <Collapsed>False</Collapsed>
        <Member type="Method">void Verify()</Member>
        <Member type="Method">void Verify(TimePeriod nextExpiration)</Member>
      </Entity>
      <Entity type="Comment">
        <Text>Generate theses through T4</Text>
        <Location left="1057" top="1214" />
        <Size width="190" height="50" />
      </Entity>
      <Entity type="Comment">
        <Text>The licensing system could work like this:
- If a verifier finds that a license code is not valid then it will send out a message to the service to notify it of a failed license check.
- Verification happens on request but also when one or more timers go to signaled mode.
- We also need to check that the verification code actually runs once every so much time, otherwise people could just comment out the calls.</Text>
        <Location left="459" top="697" />
        <Size width="270" height="184" />
      </Entity>
      <Entity type="Structure">
        <Name>LicenseCheckResult</Name>
        <Access>Internal</Access>
        <Location left="885" top="261" />
        <Size width="247" height="128" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public DateTimeOffset Generated { get; }</Member>
        <Member type="Property">public DateTimeOffset Expires { get; }</Member>
        <Member type="Property">public Checksum Checksum { get; }</Member>
      </Entity>
      <Entity type="Delegate">
        <Name>CheckLicense</Name>
        <Access>Internal</Access>
        <Location left="800" top="616" />
        <Size width="163" height="78" />
        <Collapsed>False</Collapsed>
        <ReturnType>void</ReturnType>
      </Entity>
      <Entity type="Comment">
        <Text>Everytime we do something important we check if the license is about to expire (say within 5 seconds). If it is then we mark it and request a verification.</Text>
        <Location left="560" top="261" />
        <Size width="200" height="110" />
      </Entity>
      <Entity type="Comment">
        <Text>There will be multiple verification delegates and interfaces. However not every 'service' will link to all of them.</Text>
        <Location left="907" top="436" />
        <Size width="213" height="85" />
      </Entity>
      <Entity type="Delegate">
        <Name>LicenseResultUpdated</Name>
        <Access>Internal</Access>
        <Location left="1249" top="289" />
        <Size width="202" height="95" />
        <Collapsed>False</Collapsed>
        <ReturnType>void</ReturnType>
        <Param>Checksum checksum</Param>
        <Param>DateTimeOffset expirationTime</Param>
      </Entity>
      <Entity type="Comment">
        <Text>Owned by service</Text>
        <Location left="931" top="105" />
        <Size width="160" height="50" />
      </Entity>
      <Entity type="Comment">
        <Text>How do we make sure that the Expiration time isn't set to something stupid?  Use the checksum?</Text>
        <Location left="560" top="146" />
        <Size width="200" height="92" />
      </Entity>
      <Entity type="Comment">
        <Text>The verifier then checks if the license was checked recently (say in the last minute or some other random time). If this is the case then nothing happens. If this is not the case then we verify. Verification always is done on a separate thread and we check the return of the thread (must be within X time, otherwise we assume it failed)</Text>
        <Location left="1196" top="743" />
        <Size width="254" height="151" />
      </Entity>
      <Entity type="Comment">
        <Text>The expiration time should be random but within a range. The range is determined by the validation reason (e.g. requested by a component or requested by a time based validator)</Text>
        <Location left="1577" top="289" />
        <Size width="212" height="116" />
      </Entity>
      <Entity type="Comment">
        <Text>Has a collection of delegates. Run a small pool of threads that execute these delegates when they are ready. Run a single thread that checks when the delegates should be scheduled.</Text>
        <Location left="228" top="1090" />
        <Size width="204" height="124" />
      </Entity>
      <Entity type="Interface">
        <Name>IValidationService</Name>
        <Access>Internal</Access>
        <Location left="543" top="915" />
        <Size width="163" height="78" />
        <Collapsed>False</Collapsed>
        <Member type="Method">void StartValidation()</Member>
      </Entity>
      <Entity type="Interface">
        <Name>ILicenseVerificationCache</Name>
        <Access>Internal</Access>
        <Location left="1444" top="1011" />
        <Size width="269" height="112" />
        <Collapsed>False</Collapsed>
        <Member type="Property">LicenseCheckResult LatestResult { get; }</Member>
        <Member type="Property">DateTimeOffset LastVerificationTime { get; }</Member>
        <Member type="Method">void Invalidate(TimePeriod nextExpiration)</Member>
      </Entity>
      <Entity type="Comment">
        <Text>Stores the last verification time and the last verification result. Also stores the verification check that was executed (time based, key based etc.)</Text>
        <Location left="2018" top="854" />
        <Size width="188" height="112" />
      </Entity>
      <Entity type="Comment">
        <Text>The worry is that we'll have so many calls to the validation routine that we'll swamp the system and we'll only be doing those checks. Solutions are:
- Make sure the validation call returns quickly.
- Don't make tons of calls to the actual validation routine, however we must also make sure that we have some calls to the routine.</Text>
        <Location left="2122" top="1011" />
        <Size width="291" height="175" />
      </Entity>
      <Entity type="Class">
        <Name>ValidationService</Name>
        <Access>Internal</Access>
        <Location left="543" top="1106" />
        <Size width="163" height="94" />
        <Collapsed>False</Collapsed>
        <Member type="Method">public void StartValidation()</Member>
        <Modifier>Sealed</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>LicenseValidator</Name>
        <Access>Internal</Access>
        <Location left="1057" top="1011" />
        <Size width="248" height="111" />
        <Collapsed>False</Collapsed>
        <Member type="Method">public void Verify()</Member>
        <Member type="Method">public void Verify(TimePeriod nextExpiration)</Member>
        <Modifier>Sealed</Modifier>
      </Entity>
      <Entity type="Structure">
        <Name>TimePeriod</Name>
        <Access>Internal</Access>
        <Location left="715" top="1323" />
        <Size width="220" height="111" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public RepeatPeriod RepeatEvery { get; }</Member>
        <Member type="Property">public sbyte RepeatModifier { get; }</Member>
      </Entity>
      <Entity type="Comment">
        <Text>Time periods can span anything from a few minutes to months / years. They may start from:
- Application start
- A specific date / time
</Text>
        <Location left="1050" top="1337" />
        <Size width="235" height="104" />
      </Entity>
      <Entity type="Enum">
        <Name>RepeatPeriod</Name>
        <Access>Internal</Access>
        <Location left="728" top="1587" />
        <Size width="163" height="163" />
        <Collapsed>False</Collapsed>
        <Value>Hourly</Value>
        <Value>Daily</Value>
        <Value>Weekly</Value>
        <Value>Fortnightly</Value>
        <Value>Monthly</Value>
        <Value>Yearly</Value>
      </Entity>
      <Entity type="Comment">
        <Text>Does this store validation result structs? Or does it point to a central collection?

Store structs everywhere is probably better because that spreads the knowledge and makes it harder to track back.</Text>
        <Location left="1766" top="770" />
        <Size width="181" height="159" />
      </Entity>
      <Entity type="Comment">
        <Text>Start this with use of the DI container. However we'll need some way of verifying that it is actually active. If it's not active then we need to bail.</Text>
        <Location left="370" top="1361" />
        <Size width="190" height="106" />
      </Entity>
      <Entity type="Comment">
        <Text>The verification that the thread is alive can be done by using a watch-dog that looks at a specific variable. The best solution is probably to set a DateTimeOffset object to the last time the thread updated the variable.</Text>
        <Location left="370" top="1562" />
        <Size width="190" height="150" />
      </Entity>
      <Entity type="Class">
        <Name>LicenseVerificationCache</Name>
        <Access>Internal</Access>
        <Location left="1444" top="1187" />
        <Size width="303" height="145" />
        <Collapsed>False</Collapsed>
        <Member type="Method">public void Store(ILicenseVerificationCacheProxy proxy)</Member>
        <Member type="Property">public LicenseCheckResult LatestResult { get; }</Member>
        <Member type="Property">public DateTimeOffset LastVerificationTime { get; }</Member>
        <Member type="Method">public void Invalidate(TimePeriod nextExpiration)</Member>
        <Modifier>Sealed</Modifier>
      </Entity>
      <Entity type="Structure">
        <Name>Checksum</Name>
        <Access>Internal</Access>
        <Location left="12" top="398" />
        <Size width="570" height="179" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private readonly string m_Base64Hash</Member>
        <Member type="Constructor">public Checksum(string validationResult, DateTimeOffset generationTime, DateTimeOffset expirationTime)</Member>
        <Member type="Property">public string ValidationHash { get; }</Member>
        <Member type="Method">public override bool Equals(object obj)</Member>
        <Member type="Method">public override int GetHashCode()</Member>
        <Member type="Method">public override string ToString()</Member>
      </Entity>
      <Entity type="Interface">
        <Name>ILicenseVerificationCacheProxy</Name>
        <Access>Internal</Access>
        <Location left="1477" top="1465" />
        <Size width="253" height="187" />
        <Collapsed>False</Collapsed>
      </Entity>
      <Entity type="Class">
        <Name>LicenseVerificationCacheProxy</Name>
        <Access>Internal</Access>
        <Location left="1492" top="1741" />
        <Size width="204" height="205" />
        <Collapsed>False</Collapsed>
        <Modifier>Sealed</Modifier>
      </Entity>
      <Entity type="Interface">
        <Name>ICacheProxyHolder</Name>
        <Access>Internal</Access>
        <Location left="1862" top="1206" />
        <Size width="297" height="78" />
        <Collapsed>False</Collapsed>
        <Member type="Method">void Store(ILicenseVerificationCacheProxy proxy)</Member>
      </Entity>
    </Entities>
    <Relationships>
      <Relationship type="Comment" first="5" second="3">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Comment" first="5" second="4">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="False">
          <X>775</X>
          <Y>659</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Comment" first="2" second="4">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>754</X>
          <Y>815</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>853</X>
          <Y>719</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Association" first="4" second="0">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
      </Relationship>
      <Relationship type="Comment" first="6" second="0">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Comment" first="6" second="4">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>977</X>
          <Y>546</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>862</X>
          <Y>591</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Association" first="7" second="3">
        <Label>sets</Label>
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
      </Relationship>
      <Relationship type="Association" first="0" second="7">
        <Label>If check passes</Label>
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>1326</X>
          <Y>656</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>1332</X>
          <Y>409</Y>
        </BendPoint>
        <Direction>Unidirectional</Direction>
        <AssociationType>Composition</AssociationType>
      </Relationship>
      <Relationship type="Comment" first="8" second="3">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Comment" first="9" second="3">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="False">
          <X>856</X>
          <Y>286</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Comment" first="11" second="7">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>1552</X>
          <Y>329</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>1476</X>
          <Y>329</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Comment" first="15" second="14">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="False">
          <X>1938</X>
          <Y>1055</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Comment" first="16" second="14">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>2061</X>
          <Y>1122</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>1754</X>
          <Y>1087</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Realization" first="17" second="13">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Comment" first="12" second="17">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Realization" first="18" second="0">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Association" first="18" second="14">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
      </Relationship>
      <Relationship type="Comment" first="10" second="18">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>1331</X>
          <Y>919</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>1216</X>
          <Y>986</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Association" first="17" second="4">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>731</X>
          <Y>1141</Y>
        </BendPoint>
        <Direction>Unidirectional</Direction>
        <AssociationType>Composition</AssociationType>
      </Relationship>
      <Relationship type="Association" first="17" second="19">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>731</X>
          <Y>1168</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>816</X>
          <Y>1298</Y>
        </BendPoint>
        <Direction>Unidirectional</Direction>
        <AssociationType>Composition</AssociationType>
      </Relationship>
      <Relationship type="Association" first="19" second="21">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
      </Relationship>
      <Relationship type="Comment" first="20" second="19">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Comment" first="22" second="14">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="False">
          <X>1738</X>
          <Y>1047</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Comment" first="23" second="17">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Comment" first="23" second="24">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Comment" first="1" second="18">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="False">
          <X>1148</X>
          <Y>1147</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Realization" first="25" second="14">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Comment" first="1" second="25">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Association" first="25" second="27">
        <Label>
        </Label>
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Composition</AssociationType>
      </Relationship>
      <Relationship type="Realization" first="28" second="27">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Association" first="28" second="25">
        <Label>
        </Label>
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>1445</X>
          <Y>1830</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>1392</X>
          <Y>1258</Y>
        </BendPoint>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
      </Relationship>
      <Relationship type="Realization" first="25" second="29">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
    </Relationships>
  </ProjectItem>
</Project>