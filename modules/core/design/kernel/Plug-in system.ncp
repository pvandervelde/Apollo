<Project>
  <Name>Plug-in system</Name>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.3.1512.0, Culture=neutral, PublicKeyToken=null">
    <Name>Plug-in detection</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>PluginAttribute</Name>
        <Access>Public</Access>
        <Location left="706" top="74" />
        <Size width="162" height="113" />
        <Collapsed>False</Collapsed>
        <Modifier>Sealed</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>PluginRepository</Name>
        <Access>Public</Access>
        <Location left="1209" top="584" />
        <Size width="162" height="139" />
        <Collapsed>False</Collapsed>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Interface">
        <Name>IScanner</Name>
        <Access>Public</Access>
        <Location left="960" top="30" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
      </Entity>
      <Entity type="Interface">
        <Name>IFilter</Name>
        <Access>Public</Access>
        <Location left="1192" top="30" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
      </Entity>
      <Entity type="Comment">
        <Text>how will we store the information about plug-ins. Will we let MEF do that or do we control that ourselves. We do want to be able to combine attribute values in a search so it sounds like a database (local one) would be ideal to handle that.</Text>
        <Location left="10" top="10" />
        <Size width="254" height="117" />
      </Entity>
      <Entity type="Class">
        <Name>PluginTracker</Name>
        <Access>Public</Access>
        <Location left="466" top="370" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Interface">
        <Name>IPluginTracker</Name>
        <Access>Public</Access>
        <Location left="466" top="59" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
      </Entity>
      <Entity type="Interface">
        <Name>IAssemblyFinder</Name>
        <Access>Public</Access>
        <Location left="478" top="698" />
        <Size width="162" height="140" />
        <Collapsed>False</Collapsed>
      </Entity>
      <Entity type="Class">
        <Name>AssemblyWatcher</Name>
        <Access>Public</Access>
        <Location left="767" top="618" />
        <Size width="162" height="125" />
        <Collapsed>False</Collapsed>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>DirectoryScanner</Name>
        <Access>Public</Access>
        <Location left="767" top="817" />
        <Size width="162" height="102" />
        <Collapsed>False</Collapsed>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Comment">
        <Text>Defines an interface for classes that search for assemblies. These classes should always search in async mode.</Text>
        <Location left="130" top="756" />
        <Size width="196" height="88" />
      </Entity>
      <Entity type="Comment">
        <Text>Plug-in (assembly) information needs to be stored with a version number so that we can always determine the version numbers. Also we'll probably need culture information. So somehow we'll need to match up to the full assembly name.</Text>
        <Location left="10" top="143" />
        <Size width="254" height="122" />
      </Entity>
      <Entity type="Comment">
        <Text>There are two parts in the plug-in stystem. The first is detection. The second is linking. We should be able to provide both independently from each other. For instance the kernel could really use a proper linking system, but it has no use for detection because all plug-ins are known at startup time.</Text>
        <Location left="10" top="282" />
        <Size width="254" height="151" />
      </Entity>
      <Entity type="Comment">
        <Text>Links to a in-memory database.</Text>
        <Location left="1226" top="809" />
        <Size width="158" height="60" />
      </Entity>
      <Entity type="Comment">
        <Text>Do we want to use the CCI (Common Compiler Infrastructure) for this? The use of CCI would provide us with a non-reflection way of reading assembly files. This may be faster and should prevent ever loading the assembly at all.</Text>
        <Location left="10" top="448" />
        <Size width="254" height="123" />
      </Entity>
    </Entities>
    <Relationships>
      <Relationship type="Realization" first="5" second="6">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Association" first="5" second="7">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Composition</AssociationType>
      </Relationship>
      <Relationship type="Realization" first="8" second="7">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>712</X>
          <Y>648</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>602</X>
          <Y>648</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Realization" first="9" second="7">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>724</X>
          <Y>885</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>616</X>
          <Y>864</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Comment" first="10" second="7">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="False">
          <X>422</X>
          <Y>722</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Comment" first="13" second="1">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
    </Relationships>
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.3.1512.0, Culture=neutral, PublicKeyToken=null">
    <Name>Plug-in linking</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Interface">
        <Name>IHoldPluginInformation</Name>
        <Access>Public</Access>
        <Location left="170" top="255" />
        <Size width="163" height="61" />
        <Collapsed>False</Collapsed>
      </Entity>
      <Entity type="Comment">
        <Text>Holds information about the different object types availabe. Also knows about the different connections etc.</Text>
        <Location left="472" top="255" />
        <Size width="197" height="89" />
      </Entity>
      <Entity type="Interface">
        <Name>IStoreConnections</Name>
        <Access>Public</Access>
        <Location left="140" top="595" />
        <Size width="163" height="61" />
        <Collapsed>False</Collapsed>
      </Entity>
      <Entity type="Interface">
        <Name>IConnection</Name>
        <Access>Public</Access>
        <Location left="140" top="807" />
        <Size width="162" height="61" />
        <Collapsed>False</Collapsed>
      </Entity>
      <Entity type="Comment">
        <Text>Stores information about the connection between a dependency and a dependent. This information exactly determines which dependency this is. </Text>
        <Location left="435" top="807" />
        <Size width="205" height="129" />
      </Entity>
      <Entity type="Comment">
        <Text>Stores information about all connections for all depents. Each connection stores enough information to uniquely identify it. Even in the face of multiple requests for the same type etc.</Text>
        <Location left="435" top="595" />
        <Size width="205" height="131" />
      </Entity>
      <Entity type="Comment">
        <Text>- Define default objects that get substituted for specific types, attribute values etc.. This is just like an IOC container. e.g. when using Autofac you hardcode that resolving interface X always gets you an instance of object Y. We can do a similar system for simple system components (e.g. a logger, a console application runner etc.)
- If we make this mechanism available over the entire application then we can allow the higher level components to create substitutions too. That way we could allow the project to setup the resolvers for different simulation components based on the type of simulation that the user has selected. When using this system we'll get a sort of distributed, dynamic IOC container where all the reference types get filled in at the last possible minute.
- We'll need to figure out how we are going to store all this information though. We could mabye use an actual IOC container and dynamically create builders (which we can discard when ever we want)
- Another issue is figuring out a way to be able to load components without having the entire  object graph availabe. We might be able to create dynamic proxies that only load up their suggested component once they are needed?</Text>
        <Location left="1187" top="167" />
        <Size width="460" height="296" />
      </Entity>
      <Entity type="Delegate">
        <Name>FindLinkDelegate</Name>
        <Access>Public</Access>
        <Location left="854" top="283" />
        <Size width="163" height="61" />
        <Collapsed>False</Collapsed>
        <ReturnType>ILink</ReturnType>
      </Entity>
      <Entity type="Interface">
        <Name>IMapRequestsToDependencies</Name>
        <Access>Public</Access>
        <Location left="852" top="515" />
        <Size width="187" height="61" />
        <Collapsed>False</Collapsed>
      </Entity>
      <Entity type="Interface">
        <Name>IStoreActiveComponents</Name>
        <Access>Public</Access>
        <Location left="1208" top="701" />
        <Size width="163" height="61" />
        <Collapsed>False</Collapsed>
      </Entity>
      <Entity type="Comment">
        <Text>Stores links to all the active components that should be considered for plug-in use.</Text>
        <Location left="1459" top="699" />
        <Size width="172" height="83" />
      </Entity>
      <Entity type="Comment">
        <Text>Need some kind of templating system to auto-load components based on property values.Does this need to be in the UI or in the project?

Maybe also define tool sets which are collections of tools with hooks. Problem will be how to define the hooks.</Text>
        <Location left="821" top="42" />
        <Size width="276" height="157" />
      </Entity>
      <Entity type="Comment">
        <Text>The builder links to a resolution system which is controlled from the top level project system (or from another service?). </Text>
        <Location left="10" top="10" />
        <Size width="202" height="97" />
      </Entity>
    </Entities>
    <Relationships>
      <Relationship type="Comment" first="1" second="0">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Association" first="2" second="3">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Composition</AssociationType>
      </Relationship>
      <Relationship type="Comment" first="4" second="3">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Comment" first="5" second="2">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Comment" first="6" second="7">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Association" first="7" second="8">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
      </Relationship>
      <Relationship type="Association" first="8" second="0">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>807</X>
          <Y>545</Y>
        </BendPoint>
        <Direction>Unidirectional</Direction>
        <AssociationType>Aggregation</AssociationType>
      </Relationship>
      <Relationship type="Comment" first="6" second="8">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="False">
          <X>1113</X>
          <Y>540</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Association" first="8" second="9">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Aggregation</AssociationType>
      </Relationship>
      <Relationship type="Comment" first="10" second="9">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Comment" first="11" second="6">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>1127</X>
          <Y>105</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>1352</X>
          <Y>142</Y>
        </BendPoint>
      </Relationship>
    </Relationships>
  </ProjectItem>
</Project>