//-----------------------------------------------------------------------
// <copyright company="P. van der Velde">
//     Copyright (c) P. van der Velde. All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
//
//-----------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost
//     if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------

using System;
using System.Globalization;
using System.Security.Cryptography;
using System.Text;

namespace Apollo.Utils.Licensing
{
    /// <summary>
    /// Stores information about a checksum that is used by the verification system.
    /// </summary>
    internal partial struct Checksum
    {
        /// <summary>
        /// Computes the hash value for the given validation result by combining it with
        /// the generation and expiration time..
        /// </summary>
        /// <param name="validationResult">The validation result.</param>
        /// <param name="generationTime">The time the validation result was computed.</param>
        /// <param name="expirationTime">The time the validation result expires.</param>
        /// <returns>
        ///     A base-64 encoded string version of the hash code of the validation result,
        ///     the generation time and the expiration time.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("TextTemplatingFileGenerator", "10.0.0.0")]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static string ComputeHash(string validationResult, DateTimeOffset generationTime, DateTimeOffset expirationTime)
        {
            // Add the validation result and the two date/time objects together. We'll specify
            // a round-tripable date/time string format to get all the information that is in
            // the date/time object.
            var mashedText = validationResult + 
                             generationTime.ToString("o", CultureInfo.InvariantCulture) + 
                             expirationTime.ToString("o", CultureInfo.InvariantCulture);

            // Calculate the hash value
            var data = Encoding.Unicode.GetBytes(mashedText);
            var hash = new SHA512Managed().ComputeHash(data);

            // Translate the resulting data back to a hash string
            return Convert.ToBase64String(hash, Base64FormattingOptions.None);
        }
    }
}
