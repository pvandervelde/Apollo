Component assembly in Apollo:
In MCS we used to force the user to select all the component links manually. This made assembly easier because
we were certain that all parts would be connected at one specific time (or more precisely before one specific 
time, namely just before we would allow the user to run the simulation).

For Apollo we should improve this. Here's a thought:
- Define default objects that get substituted for specific types, attribute values etc.. This is just like
  an IOC container. e.g. when using Autofac you hardcode that resolving interface X always gets you an
  instance of object Y. We can do a similar system for simple system components (e.g. a logger, 
  a console application runner etc.)
- If we make this mechanism available over the entire application then we can allow the higher level components
  to create substitutions too. That way we could allow the project to setup the resolvers for different
  simulation components based on the type of simulation that the user has selected.
  When using this system we'll get a sort of distributed, dynamic IOC container where all the reference
  types get filled in at the last possible minute.
- We'll need to figure out how we are going to store all this information though. We could mabye use
  an actual IOC container and dynamically create builders (which we can discard when ever we want)
- Another issue is figuring out a way to be able to load components without having the entire 
  object graph availabe. We might be able to create dynamic proxies that only load up their
  suggested component once they are needed? 
  --> Func<> and Action<> could work really well for this because you can delay loading
      the object until you know what it is that you want. This way you can also make the
	  selection depend on the run-time state of the system and you can move the selection
	  decision away from one location, e.g. the owner component can do the selection or
	  the system or ....