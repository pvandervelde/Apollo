<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0"
         DefaultTargets="Run"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Build flags -->
        <ShouldClean>true</ShouldClean>
        <ShouldHaveCoverage>true</ShouldHaveCoverage>
        <ShouldCleanPackages>false</ShouldCleanPackages>
        
        <!-- Build configuration -->
        <Configuration Condition=" '$(Configuration)' == '' ">Release</Configuration>
        <Platform Condition=" '$(Platform)' == ''">Any CPU</Platform>
        <PlatformTranslated>$(Platform.Replace(" ",""))</PlatformTranslated>
        
        <!-- Directories -->
        <DirWorkspace>$(MSBuildProjectDirectory)</DirWorkspace>
        <DirInstall>$(DirWorkspace)\install</DirInstall>
        <DirPackages>$(DirWorkspace)\packages</DirPackages>
        <DirSrc>$(DirWorkspace)\src</DirSrc>
        <DirTemplates>$(DirWorkspace)\templates</DirTemplates>
        <DirTools>$(DirWorkspace)\tools</DirTools>
        <DirBuild>$(DirWorkspace)\build</DirBuild>
        <DirBuildBin>$(DirBuild)\bin\$(PlatformTranslated)\$(Configuration)</DirBuildBin>
        <DirBuildDeploy>$(DirBuild)\deploy</DirBuildDeploy>
        <DirBuildDoc>$(DirBuild)\doc</DirBuildDoc>
        <DirBuildLogs>$(DirBuild)\logs</DirBuildLogs>
        <DirBuildTemp>$(DirBuild)\temp</DirBuildTemp>
        
        <!-- Version number -->
        <VersionMajor>0</VersionMajor>
        <VersionMinor>0</VersionMinor>
        <VersionBuild>0</VersionBuild>
        <VersionRevision>0</VersionRevision>
        
        <!-- nfermi information necessary to get the release notes -->
        <ApplicationName>Apollo</ApplicationName>
        <!-- We don't expect this to change but if we do change it then we can at least override it -->
        <ProjectName Condition=" '$(ProjectName)' == ''">Apollo</ProjectName>
        <FixedIn Condition=" '$(FixedIn)' == '' "></FixedIn>
        <ShouldMarkAsReleased Condition=" '$(ShouldMarkAsReleased)' == ''">false</ShouldMarkAsReleased>
        
        <!-- Tools -->
        <MsBuildExtensionsPath>$(DirTools)\msbuild.extensions</MsBuildExtensionsPath>
    </PropertyGroup>
    
    <Import Project="$(MsBuildExtensionsPath)\Ccm.msbuild"
            Condition="Exists('$(MsBuildExtensionsPath)\Ccm.msbuild')"/>
    <Import Project="$(MsBuildExtensionsPath)\FxCop.msbuild"
            Condition="Exists('$(MsBuildExtensionsPath)\FxCop.msbuild')"/>
    <Import Project="$(MsBuildExtensionsPath)\MbUnit.msbuild"
            Condition="Exists('$(MsBuildExtensionsPath)\MbUnit.msbuild')"/>
    <Import Project="$(MsBuildExtensionsPath)\NugetGatherDependencies.msbuild"
            Condition="Exists('$(MsBuildExtensionsPath)\NugetGatherDependencies.msbuild')"/>
    <Import Project="$(MsBuildExtensionsPath)\NugetPack.msbuild"
            Condition="Exists('$(MsBuildExtensionsPath)\NugetPack.msbuild')"/>
    <Import Project="$(MsBuildExtensionsPath)\NugetRestore.msbuild"
            Condition="Exists('$(MsBuildExtensionsPath)\NugetRestore.msbuild')"/>
    <Import Project="$(MsBuildExtensionsPath)\PartCover.msbuild"
            Condition="Exists('$(MsBuildExtensionsPath)\PartCover.msbuild')"/>
    <Import Project="$(MsBuildExtensionsPath)\PartCoverExclusionWriter.msbuild"
            Condition="Exists('$(MsBuildExtensionsPath)\PartCoverExclusionWriter.msbuild')"/>
    <Import Project="$(MsBuildExtensionsPath)\SetEnvironmentVariable.msbuild"
            Condition="Exists('$(MsBuildExtensionsPath)\SetEnvironmentVariable.msbuild')"/>
    <Import Project="$(MsBuildExtensionsPath)\SourceMonitor.msbuild"
            Condition="Exists('$(MsBuildExtensionsPath)\SourceMonitor.msbuild')"/>
    <Import Project="$(MsBuildExtensionsPath)\SourceMonitorOutputToCsv.msbuild"
            Condition="Exists('$(MsBuildExtensionsPath)\SourceMonitorOutputToCsv.msbuild')"/>
    <Import Project="$(MsBuildExtensionsPath)\TemplateFile.msbuild"
            Condition="Exists('$(MsBuildExtensionsPath)\TemplateFile.msbuild')"/>
            
    <Import Project="$(DirWorkspace)\version.xml"
            Condition="Exists('$(DirWorkspace)\version.xml')"/>

    <Target Name="Run" DependsOnTargets="_Clean;_BuildBinaries;_ExecuteUnitTests;_GenerateDocumentation;_CodeAnalysis;_Package">
        <!-- Do nothing here -->
    </Target>
    
    <!-- Display info -->
    <Target Name="_DisplayInfo">
        <Message Text="Configuration = $(Configuration)" />
        <Message Text="Platform = $(Platform)" />
        
        <Message Text="External properties:" />
        <Message Text="Version: $(VersionMajor).$(VersionMinor).$(VersionBuild).$(VersionRevision)" />
        <Message Text="Fixed in placeholder: $(FixedIn)" />
        <Message Text="NFermi tools directory: $(DirNFermi)" />
    </Target>
    
    <!-- Clean -->
    <PropertyGroup>
        <FileSln>$(DirSrc)\apollo.sln</FileSln>
        <FileMsiSln>$(DirInstall)\apollo.sln</FileMsiSln>
    </PropertyGroup>
    <Target Name="_Clean" DependsOnTargets="_DisplayInfo" Condition="$(ShouldClean)">
        <!-- 
            Only clean the source solution and not the installer solution because for that
            we need to be able to load Wix which might not be there yet (because it is obtained via NuGet)
        -->
        <MSBuild Projects="$(FileSln)" Targets="Clean" Properties="Configuration=$(Configuration);Platform=$(Platform)" />
       
        <!-- 
            Don't try to delete the directory because that fails randomly because
            some file is being locked. This then leads to a failing task, but ..
            the next task is run and then the delete command still executes (delayed 
            by the OS). Unfortunately the next task is the task that puts the directories
            back ...
        -->
        <ItemGroup>
            <BuildFilesToDelete Include="$(DirBuild)\**\*.*"/>
        </ItemGroup>
        <Delete Files="@(BuildFilesToDelete)" />
        
        <RemoveDir Directories="$(DirBuildTemp)" />
        <RemoveDir Directories="$(DirBuildDeploy)" />
        <RemoveDir Directories="$(DirBuildLogs)" />
        <RemoveDir Directories="$(DirBuildDoc)" />

        <RemoveDir Directories="$(DirPackages)" Condition="$(ShouldCleanPackages)" />
    </Target>
    
    <!-- Build binaries -->
    <Target Name="_BuildBinaries" DependsOnTargets="_DisplayInfo">
        <MakeDir Directories="$(DirBuild);" Condition="!Exists('$(DirBuild)')" />
        <MakeDir Directories="$(DirBuildBin)" Condition="!Exists('$(DirBuildBin)')" />
        
        <MSBuild Projects="$(FileSln)" Properties="Configuration=$(Configuration);Platform=$(Platform)" />
    </Target>
    
    <!-- Run Nuget for the global build -->
    <PropertyGroup>
        <PackagesConfig>$([System.IO.Path]::Combine($(DirWorkspace), "packages.config"))</PackagesConfig>
    </PropertyGroup>
    <Target Name="_RestorePackages" DependsOnTargets="_DisplayInfo;_Clean">
        <NugetRestore NugetPath="nuget" PackageFile="$(PackagesConfig)" PackageDirectory="$(DirPackages)" />
    </Target>
    
    <!-- Run unit tests -->
    <Target Name="_ExecuteUnitTests" DependsOnTargets="_BuildBinaries;_RestorePackages;_ExecuteUnitTestsWithoutCoverage;_ExecuteUnitTestsWithCoverage" Condition=" '$(Configuration)' != 'Deploy'">
    </Target>
    
    <PropertyGroup>
        <MbUnitExe>Gallio.Echo.x86.exe</MbUnitExe>
        <MbUnitDir>$(DirPackages)\Gallio.Complete</MbUnitDir>
    </PropertyGroup>
    <Target Name="_ExecuteUnitTestsWithoutCoverage" Condition="!$(ShouldHaveCoverage) AND '$(Configuration)' != 'Deploy'" DependsOnTargets="_BuildBinaries;_RestorePackages">
        <MakeDir Directories="$(DirBuildLogs)" Condition="!Exists('$(DirBuildLogs)')" />
        
        <ItemGroup>
            <MbUnitTestAssemblies Include="$(DirBuildBin)\**\test.unit.*.dll" />
        </ItemGroup>
        
        <MbUnit MbUnitExe="$(MbUnitExe)"
                MbUnitDir="$(MbUnitDir)"
                OutputDir="$(DirBuildLogs)"
                TargetAssemblies="@(MbUnitTestAssemblies)"/>
    </Target>
    
    <PropertyGroup>
        <FileTemplatePartCoverConfig>$(DirTemplates)\PartCover.Settings.xml.in</FileTemplatePartCoverConfig>
        <FileGeneratedPartCoverConfig>$(DirBuildTemp)\PartCover.Settings.xml</FileGeneratedPartCoverConfig>
        <FilePartCoverReport>$(DirBuildLogs)\partcover.xml</FilePartCoverReport>
        <PartCoverExclusionWriterExe>partcoverexclusionwriter.exe</PartCoverExclusionWriterExe>
        <PartCoverExclusionWriterDir>$(DirPackages)\partcoverexclusionwriter</PartCoverExclusionWriterDir>
        <PartCoverExe>partcover.exe</PartCoverExe>
        <PartCoverDir>$(DirPackages)\partcover</PartCoverDir>
    </PropertyGroup>
    <Target Name="_ExecuteUnitTestsWithCoverage" Condition="$(ShouldHaveCoverage) AND '$(Configuration)' != 'Deploy'" DependsOnTargets="_BuildBinaries;_RestorePackages">
        <MakeDir Directories="$(DirBuildTemp)" Condition="!Exists('$(DirBuildTemp)')" />
        <MakeDir Directories="$(DirBuildLogs)" Condition="!Exists('$(DirBuildLogs)')" />
        
        <ItemGroup>
            <MbUnitTestAssemblies Include="$(DirBuildBin)\**\test.unit.*.dll" />
        </ItemGroup>
        <ItemGroup>
            <PartCoverConfig Include="GallioExe">
                <ReplacementValue>$(MbUnitExe)</ReplacementValue>
            </PartCoverConfig>
            <PartCoverConfig Include="DirGallio">
                <ReplacementValue>$(MbUnitDir)</ReplacementValue>
            </PartCoverConfig>
            <PartCoverConfig Include="DirBin">
                <ReplacementValue>$(DirBuildBin)</ReplacementValue>
            </PartCoverConfig>
            <PartCoverConfig Include="DirReports">
                <ReplacementValue>$(DirBuildLogs)</ReplacementValue>
            </PartCoverConfig>
            <PartCoverConfig Include="Report">
                <ReplacementValue>$(FilePartCoverReport)</ReplacementValue>
            </PartCoverConfig>
            <PartCoverConfig Include="Files">
                <ReplacementValue>@(MbUnitTestAssemblies, ' ')</ReplacementValue>
            </PartCoverConfig>
        </ItemGroup>
        <TemplateFile Template="$(FileTemplatePartCoverConfig)" OutputFileName="$(FileGeneratedPartCoverConfig)" Tokens="@(PartCoverConfig)" />
        
        <ItemGroup>
            <PartCoverIgnoreAttributes Include="System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute" />
            <PartCoverIgnoreAttributes Include="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
        </ItemGroup>
        <ItemGroup>
            <PartCoverTargetAssemblies Include="$(DirBuildBin)\**\Apollo*.dll"
                                       Exclude="$(DirBuildBin)\**\Test*;$(DirBuildBin)\**\*vshost*"/>
        </ItemGroup>
        <PartCoverExclusionWriter PartCoverExclusionWriterExe="$(PartCoverExclusionWriterExe)"
                                  PartCoverExclusionWriterDir="$(PartCoverExclusionWriterDir)"
                                  SettingsFile="$(FileGeneratedPartCoverConfig)"
                                  IgnoreAttributes="@(PartCoverIgnoreAttributes)"
                                  TargetAssemblies="@(PartCoverTargetAssemblies)" />
                                  
        <PartCover PartCoverExe="$(PartCoverExe)"
                   PartCoverDir="$(PartCoverDir)"
                   SettingsFile="$(FileGeneratedPartCoverConfig)" />
                   
        <XslTransformation XmlInputPaths="$(FilePartCoverReport)"
                           OutputPaths="$(DirBuildLogs)\partcover.html" 
                           XslInputPath="$(PartCoverDir)\xslt\partcoverfullreport.xslt" />
    </Target>

    <!-- Link all documentation targets -->
    <Target Name="_GenerateDocumentation" DependsOnTargets="_RestorePackages;_GenerateApiDocumentation">
    </Target>
    
    <!-- Generate the API docs -->
    <PropertyGroup>
        <DirSandcastle>$(DirPackages)\Sandcastle</DirSandcastle>
        <DirSandcastleHelpFileBuilder>$(DirPackages)\SandcastleHelpFileBuilder</DirSandcastleHelpFileBuilder>
        <DirSandcastleReferenceData>$(DirSandcastle)\Data</DirSandcastleReferenceData>
        <FileTemplateSandcastle>$(DirTemplates)\sandcastle.shfbproj.in</FileTemplateSandcastle>
        <FileGeneratedSandcastle>$(DirBuildTemp)\apollo.shfbproj</FileGeneratedSandcastle>
        <FileSandcastleReferenceSln>$(DirSandcastle)\fxReflection.proj</FileSandcastleReferenceSln>
        <ReferenceDataMsBuildCommandLine>"$(MSBuildToolsPath)/msbuild.exe" "$(FileSandcastleReferenceSln)"</ReferenceDataMsBuildCommandLine>
        <ShfbMsBuildCommandLine>"$(MSBuildToolsPath)/msbuild.exe" "$(FileGeneratedSandcastle)" /p:SHFBROOT=$(DirSandcastleHelpFileBuilder)</ShfbMsBuildCommandLine>
    </PropertyGroup>
    <Target Name="_GenerateApiDocumentation" DependsOnTargets="_BuildBinaries;_RestorePackages">
        <MakeDir Directories="$(DirBuildTemp)" Condition="!Exists('$(DirBuildTemp)')" />
        <MakeDir Directories="$(DirBuildLogs)" Condition="!Exists('$(DirBuildLogs)')" />
        <MakeDir Directories="$(DirBuildDoc)" Condition="!Exists('$(DirBuildDoc)')" />
        
        <ItemGroup>
            <SandcastleTokens Include="DirTools">
                <ReplacementValue>$(DirPackages)</ReplacementValue>
            </SandcastleTokens>
            <SandcastleTokens Include="DirDoc">
                <ReplacementValue>$(DirBuildDoc)</ReplacementValue>
            </SandcastleTokens>
            <SandcastleTokens Include="DirLogs">
                <ReplacementValue>$(DirBuildLogs)</ReplacementValue>
            </SandcastleTokens>
            <SandcastleTokens Include="DirBin">
                <ReplacementValue>$(DirBuildBin)</ReplacementValue>
            </SandcastleTokens>
        </ItemGroup>
        <TemplateFile Template="$(FileTemplateSandcastle)" OutputFileName="$(FileGeneratedSandcastle)" Tokens="@(SandcastleTokens)" />
        
        <!-- 
            This doesn't stick because:
            a) MsBuild never reloads the Environment variables and the msbuild target
               runs the same instance of msbuild
            b) They're only set for the current process so ....
        -->
        <SetEnvironmentVariable Name="DXROOT" Value="$(DirSandcastle)" />
        
        <!-- 
            Build reference data via msbuild. We need to do this via the 
            Exec task because we need a child process so that the change in environment 
            variables is picked up (MsBuild doesn't listen for changes in environment variables)
        -->
        <Exec Command="$(ReferenceDataMsBuildCommandLine)" Condition="!Exists('$(DirSandcastleReferenceData)')" />
        
        <!-- Run sandcastle via msbuild -->
        <Exec Command="$(ShfbMsBuildCommandLine)" />
    </Target>
    
    <!-- Link all code analysis targets -->
    <Target Name="_CodeAnalysis" DependsOnTargets="_BuildBinaries;_RestorePackages;_CodeAnalysisFxCop;_CodeAnalysisCcm;_CodeAnalysisSourceMonitor">
    </Target>
    
    <!-- Run FxCop -->
    <PropertyGroup>
        <FxCopDir>$(DirPackages)\FxCop</FxCopDir>
        <FxCopCustomDictionary>$(FxCopDir)\CustomDictionary.xml</FxCopCustomDictionary>
        <FxCopOutputFile>$(DirBuildLogs)\fxcop.xml</FxCopOutputFile>
    </PropertyGroup>
    <Target Name="_CodeAnalysisFxCop" DependsOnTargets="_BuildBinaries;_RestorePackages" Condition=" '$(Configuration)' != 'Deploy'">
        <MakeDir Directories="$(DirBuildLogs)" Condition="!Exists('$(DirBuildLogs)')" />
        
        <ItemGroup>
            <FxCopRuleAssemblies Include="$(DirFxCop)\Rules\*.dll" />
        </ItemGroup>
        <ItemGroup>
            <FxCopTargetAssemblies Include="$(DirBuildBin)\Apollo*.dll;$(DirBuildBin)\Apollo*.exe"
                                   Exclude="$(DirBuildBin)\*vshost*.*"/>
        </ItemGroup>
        <ItemGroup>
            <!-- Exclude: 1006: do not nest generic types in member signatures -->
            <FxCopRules Include="-Microsoft.Rules.Managed.CA1006" />
            <!-- Default parameters should not be used -->
            <FxCopRules Include="-Microsoft.Rules.Managed.CA1026" />
            <!-- Exclude: 1030: use events where appropriate -->
            <FxCopRules Include="-Microsoft.Rules.Managed.CA1030" />
        </ItemGroup>
            
        <FxCop FxCopDir="$(FxCopDir)"
               FxCopOutputFile="$(FxCopOutputFile)"
               FxCopCustomDictionary="${FxCopCustomDictionary}"
               FxCopTargetAssemblies="@(FxCopTargetAssemblies)"
               FxCopRuleAssemblies="@(FxCopruleAssemblies)"
               FxCopRules="@(FxCopRules)" />
    </Target>
    
    <PropertyGroup>
        <ExePathCcm>$(DirPackages)\Ccm\Ccm.exe</ExePathCcm>
        <FileTemplateCcm>$(DirTemplates)\ccm.xml.in</FileTemplateCcm>
        <FileGeneratedCcm>$(DirBuildTemp)\ccm.xml</FileGeneratedCcm>
    </PropertyGroup>
    <Target Name="_CodeAnalysisCcm" DependsOnTargets="_BuildBinaries;_RestorePackages">
        <MakeDir Directories="$(DirBuildTemp)" Condition="!Exists('$(DirBuildTemp)')" />
        <MakeDir Directories="$(DirBuildLogs)" Condition="!Exists('$(DirBuildLogs)')" />
        
        <ItemGroup>
            <CcmTokens Include="DirSrc">
                <ReplacementValue>$(DirSrc)</ReplacementValue>
            </CcmTokens>
        </ItemGroup>
        <TemplateFile Template="$(FileTemplateCcm)" OutputFileName="$(FileGeneratedCcm)" Tokens="@(CcmTokens)" />
    
        <Ccm CcmExe="$(ExePathCcm)"
             ConfigFile="$(FileGeneratedCcm)"
             OutputFile="$(DirBuildLogs)\apollo.ccm.xml" />
    </Target>
    
    <PropertyGroup>
        <ExePathSourceMonitor>$(DirPackages)\Sourcemonitor\SourceMonitor.exe</ExePathSourceMonitor>
        <FileTemplateSourceMonitor>$(DirTemplates)\sourcemonitor.xml.in</FileTemplateSourceMonitor>
        <FileGeneratedSourceMonitor>$(DirBuildTemp)\sourcemonitor.xml</FileGeneratedSourceMonitor>
        <FileSourceMonitorOutput>$(DirBuildLogs)\apollo.sourcemonitor.xml</FileSourceMonitorOutput>
        <Now>$([System.DateTime]::Now.ToString("yyyy-MM-ddTHH:mm:ss"))</Now>
    </PropertyGroup>
    <Target Name="_CodeAnalysisSourceMonitor" DependsOnTargets="_BuildBinaries;_RestorePackages">
        <MakeDir Directories="$(DirBuildTemp)" Condition="!Exists('$(DirBuildTemp)')" />
        <MakeDir Directories="$(DirBuildLogs)" Condition="!Exists('$(DirBuildLogs)')" />
        
        <ItemGroup>
            <SourceMonitorTokens Include="ProjectFileName">
                <ReplacementValue>$(DirBuildTemp)\apollo.smp</ReplacementValue>
            </SourceMonitorTokens>
            <SourceMonitorTokens Include="DirSrc">
                <ReplacementValue>$(DirSrc)</ReplacementValue>
            </SourceMonitorTokens>
            <SourceMonitorTokens Include="Now">
                <ReplacementValue>$(Now)</ReplacementValue>
            </SourceMonitorTokens>
            <SourceMonitorTokens Include="FileOutputSourceMonitor">
                <ReplacementValue>$(FileSourceMonitorOutput)</ReplacementValue>
            </SourceMonitorTokens>
        </ItemGroup>
        <TemplateFile Template="$(FileTemplateSourceMonitor)" OutputFileName="$(FileGeneratedSourceMonitor)" Tokens="@(SourceMonitorTokens)" />
    
        <SourceMonitor SourceMonitorExe="$(ExePathSourceMonitor)"
                       ConfigFile="$(FileGeneratedSourceMonitor)" />
                       
        <SourceMonitorOutputToCsv ProjectName="apollo"
                                  InputFile="$(FileSourceMonitorOutput)"
                                  OutputPath="$(DirBuildLogs)" />
    </Target>
    
    <!-- Link all packaging targets -->
    <Target Name="_Package" DependsOnTargets="_BuildBinaries;_RetrieveReleaseNotes;_PackageMsi">
    </Target>
    
    <PropertyGroup>
        <ExeNFermi>$(DirNFermi)\nfermi.exe</ExeNFermi>
    </PropertyGroup>
    <Target Name="_RetrieveReleaseNotes" Condition="Exists('$(DirNFermi)')" >
        <Exec Command="$(ExeNFermi) --ApplicationName=&quot;$(ApplicationName)&quot; --ApplicationVersion=$(VersionMajor).$(VersionMinor).$(VersionBuild).$(VersionRevision) --ProjectName=&quot;$(ProjectName)&quot; --FixedInTag=&quot;$(FixedIn)&quot; --ReleaseVersion=$(ShouldMarkAsReleased) --Output=&quot;$(DirBuildTemp)&quot;"
              WorkingDirectory="$(DirBuildTemp)" />
    </Target>
    
    <!-- Build MSI installers -->
    <Target Name="_PackageMsi" DependsOnTargets="_BuildBinaries">
        <MakeDir Directories="$(DirBuildDeploy)" Condition="!Exists('$(DirBuildDeploy)')" />
        <MSBuild Projects="$(FileMsiSln)" 
                 Properties="Configuration=Release;Platform=x86;BuildConfiguration=$(Configuration);BuildPlatform=$(Platform)"
                 Targets="Rebuild" />
                 
        <MSBuild Projects="$(FileMsiSln)" 
                 Properties="Configuration=Release;Platform=x64;BuildConfiguration=$(Configuration);BuildPlatform=$(Platform)"
                 Targets="Rebuild" />
    </Target>
</Project>